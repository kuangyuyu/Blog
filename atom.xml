<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Little Tail</title>
  
  <subtitle>Berry&#39;s Blogs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://berryk.top/"/>
  <updated>2018-02-15T05:38:26.124Z</updated>
  <id>http://berryk.top/</id>
  
  <author>
    <name>Berry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指offer（三）：14-18</title>
    <link href="http://berryk.top/archives/1084f876.html"/>
    <id>http://berryk.top/archives/1084f876.html</id>
    <published>2018-02-13T10:09:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h2 id="剑14-反转链表"><a href="#剑14-反转链表" class="headerlink" title="剑14-反转链表"></a>剑14-反转链表</h2><p>输入一个链表，反转链表后，输出链表的所有元素。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    def_init_(self,x):</span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">ReverseList</span><span class="params">(self,pHead)</span>:</span></span><br><span class="line">        <span class="comment">#判断指针是否为空</span></span><br><span class="line">        <span class="keyword">if</span> pHead == <span class="keyword">None</span> <span class="keyword">or</span> pHead.next == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">return</span> pHead</span><br><span class="line">        <span class="comment">#反转链表</span></span><br><span class="line">        last = Nonep</span><br><span class="line">        <span class="keyword">while</span> pHead != <span class="keyword">None</span>:</span><br><span class="line">            tmp = pHead.next</span><br><span class="line">            pHead.next = last</span><br><span class="line">            last = pHead</span><br><span class="line">            pHead = tmp</span><br><span class="line">        <span class="keyword">return</span> last</span><br></pre></td></tr></table></figure></p><h2 id="剑15-合并两个排序的链表"><a href="#剑15-合并两个排序的链表" class="headerlink" title="剑15-合并两个排序的链表"></a>剑15-合并两个排序的链表</h2><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><p>思路：<br><em>比较两个链表的首结点，哪个小的的结点则合并到第三个链表尾结点，并向前移动一个结点。</em>步骤一结果会有一个链表先遍历结束，或者没有<br><em>第三个链表尾结点指向剩余未遍历结束的链表</em>返回第三个链表首结点</p><p>分析：<br><img src="https://uploadfiles.nowcoder.net/images/20170119/3111850_1484789893742_6903DA8DDE03E5B02CCB5F97FC3E53C2" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,x)</span>:</span></span><br><span class="line">        self.val = x</span><br><span class="line">        self.next = <span class="keyword">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Merge</span><span class="params">(self, pHead1,pHead2)</span>:</span></span><br><span class="line">        new = ListNode(<span class="number">1</span>)</span><br><span class="line">        last = new</span><br><span class="line">        <span class="keyword">while</span> pHead1 <span class="keyword">and</span> pHead2:</span><br><span class="line">            <span class="keyword">if</span> pHead1.val &lt;= pHead2.val:</span><br><span class="line">                new.next = pHead1</span><br><span class="line">                pHead1 = pHead1.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new.next = pHead2</span><br><span class="line">                pHead2 = pHead2.next</span><br><span class="line">            new = new.next</span><br><span class="line">        <span class="keyword">if</span> pHead1:</span><br><span class="line">            new.next = pHead1</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            new.next = pHead2</span><br><span class="line">        <span class="keyword">return</span> last.next</span><br></pre></td></tr></table></figure><h2 id="剑16-树的子结构"><a href="#剑16-树的子结构" class="headerlink" title="剑16-树的子结构"></a>剑16-树的子结构</h2><p>输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）<br>分析：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">HasSubtree</span><span class="params">(self, pRoot1, pRoot2)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> pRoot1 <span class="keyword">or</span> <span class="keyword">not</span> pRoot2:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> self.is_subtree(pRoot1, pRoot2) <span class="keyword">or</span> self.HasSubtree(pRoot1.left, pRoot2) <span class="keyword">or</span> self.HasSubtree(pRoot1.right, pRoot2)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_subtree</span><span class="params">(self, A, B)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> B:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> A <span class="keyword">or</span> A.val != B.val:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">return</span> self.is_subtree(A.left,B.left) <span class="keyword">and</span> self.is_subtree(A.right, B.right)</span><br></pre></td></tr></table></figure><h2 id="剑17-二叉树的镜像"><a href="#剑17-二叉树的镜像" class="headerlink" title="剑17-二叉树的镜像"></a>剑17-二叉树的镜像</h2><p>题目描述<br>操作给定的二叉树，将其变换为源二叉树的镜像。<br>输入描述:<br>二叉树的镜像定义：源二叉树<br>            8<br>           /  \<br>          6   10<br>         / \  / \<br>        5  7 9 11<br>        镜像二叉树<br>            8<br>           /  \<br>          10   6<br>         / \  / \<br>        11 9 7  5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># 返回镜像树的根节点</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Mirror</span><span class="params">(self,root)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> root != <span class="keyword">None</span>:</span><br><span class="line">            root.left,root.right=root.right,root.left</span><br><span class="line">            self.Mirror(root.left)</span><br><span class="line">            self.Mirroe(root.right)</span><br></pre></td></tr></table></figure><h2 id="剑18-顺时针打印矩阵"><a href="#剑18-顺时针打印矩阵" class="headerlink" title="剑18-顺时针打印矩阵"></a>剑18-顺时针打印矩阵</h2><p>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printMatrix</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> matrix:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line">        <span class="keyword">if</span> len(matrix)==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> matrix[<span class="number">0</span>]</span><br><span class="line">        target = []</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>):</span><br><span class="line">            target.extend(matrix[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">del</span> matrix[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> len(matrix)==<span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            tmp=[]</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,len(matrix[<span class="number">0</span>])+<span class="number">1</span>):</span><br><span class="line">                tmp.append([m[-j] <span class="keyword">for</span> m <span class="keyword">in</span> matrix])</span><br><span class="line">            matrix=tmp</span><br><span class="line">        <span class="keyword">return</span> target</span><br></pre></td></tr></table></figure><p>我觉得下面这个比较好理解一些：<br> 可以模拟魔方逆时针旋转的方法，一直做取出第一行的操作<br>例如<br>1 2 3<br>4 5 6<br>7 8 9<br>输出并删除第一行后，再进行一次逆时针旋转，就变成：<br>6 9<br>5 8<br>4 7<br>继续重复上述操作即可。<br>Python代码如下<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># matrix类型为二维列表，需要返回列表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printMatrix</span><span class="params">(self, matrix)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">while</span>(matrix):</span><br><span class="line">            result+=matrix.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> matrix <span class="keyword">or</span> <span class="keyword">not</span> matrix[<span class="number">0</span>]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            matrix = self.turn(matrix)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn</span><span class="params">(self,matrix)</span>:</span></span><br><span class="line">        num_r = len(matrix)</span><br><span class="line">        num_c = len(matrix[<span class="number">0</span>])</span><br><span class="line">        newmat = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(num_c):</span><br><span class="line">            newmat2 = []</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(num_r):</span><br><span class="line">                newmat2.append(matrix[j][i])</span><br><span class="line">            newmat.append(newmat2)</span><br><span class="line">        newmat.reverse()</span><br><span class="line">        <span class="keyword">return</span> newmat</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;剑14-反转链表&quot;&gt;&lt;a href=&quot;#剑14-反转链表&quot; class=&quot;headerlink&quot; title=&quot;剑14-反转链表&quot;&gt;&lt;/a&gt;剑14-反转链表&lt;/h2&gt;&lt;p&gt;输入一个链表，反转链表后，输出链表的所有元素。&lt;br&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="剑指offer" scheme="http://berryk.top/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="查找" scheme="http://berryk.top/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="替换空格" scheme="http://berryk.top/tags/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    
      <category term="打印链表" scheme="http://berryk.top/tags/%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法：GAN</title>
    <link href="http://berryk.top/archives/b2b9d295.html"/>
    <id>http://berryk.top/archives/b2b9d295.html</id>
    <published>2018-02-12T16:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>生成对抗网络（GAN）一经提出就风光无限，更是被Yann Lecun誉为“十年来机器学习领域最有趣的想法”。</p><p>GAN“左右互搏”的理念几乎众所周知，但正如卷积神经网络（CNN）一样，GAN发展至今已经衍生出了诸多变化形态。</p><p>今天，文摘菌就来为大家盘点一下GAN大家庭中各具特色的成员们。</p><p>他们的名单如下：</p><p>1.DCGANs</p><p>2.Improved DCGANs</p><p>3.Conditional GANs</p><p>4.InfoGANs</p><p>5.Wasserstein GANs</p><p>6.Improved WGANs</p><p>7.BEGANs</p><p>8.ProGANs</p><p>9.CycleGANs</p><p>注意，这篇文章不会包含以下内容</p><p>•   复杂的技术分析</p><p>•   代码（但有代码链接）</p><p>•   详细的研究清单</p><p>（你可以点击以下链接<a href="https://github.com/zhangqianhui/AdversarialNetsPapers）" target="_blank" rel="noopener">https://github.com/zhangqianhui/AdversarialNetsPapers）</a></p><p>想要了解更多GANs相关内容的也可以留言告诉文摘菌哦～</p><h1 id="GANs概论"><a href="#GANs概论" class="headerlink" title="GANs概论"></a>GANs概论</h1><p>如果你对GANs很熟悉的话，你可以跳过这部分的内容。</p><p>GANs最早由Ian Goodfellow提出，由两个网络构成，一个生成器和一个鉴别器。他们在同一时间训练并且在极小化极大算法（minimax）中进行竞争。生成器被训练来欺骗鉴别器以产生逼真的图像，鉴别器则在训练中学会不被生成器愚弄。</p><h2 id="GAN-训练原理概览"><a href="#GAN-训练原理概览" class="headerlink" title="GAN 训练原理概览"></a>GAN 训练原理概览</h2><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424777/641" alt=""></p><p>首先，生成器通过从一个简单分布（例如正态分布）中抽取一个噪音向量Z，并且上行采样（upsample）这个向量来生成图像。在最初的循环中，这些图像看起来非常嘈杂。然后，鉴别器得到真伪图像并学习去识别它们。随后生成器通过反向传播算法（backpropagation）收到鉴别器的反馈，渐渐在生成图像时做得更好。我们最终希望伪图像的分布尽可能地接近真图像。或者，简单来说，我们想要伪图像尽可能看起来像真的一样。 </p><p>值得一提的是，因为GANs是用极小化极大算法做优化的，所以训练过程可能会很不稳定。不过你可以使用一些“小技巧”来获得更稳健的训练过程。</p><p>在下面这个视频中，你可以看到GANs所生成图片的训练演变过程。 </p><embed type="video/mp4" allowscriptaccess="always" allowfullscreen="true" wmode="transparent" quality="high" height="490" width="490" src="http://p3nyp7kdl.bkt.clouddn.com/x051320l2ec.mp4"><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>如果对GANs的基本实现感兴趣，可以参见代码的链接：</p><p>Tensorflow（<a href="https://github.com/ericjang/genadv_tutorial/blob/master/genadv1.ipynb）" target="_blank" rel="noopener">https://github.com/ericjang/genadv_tutorial/blob/master/genadv1.ipynb）</a></p><p>Torch 和 Python (PyTorch)（<a href="https://github.com/devnag/pytorch-generative-adversarial-networks；https://medium.com/@devnag/generative-adversarial-networks-gans-in-50-lines-of-code-pytorch-e81b79659e3f）" target="_blank" rel="noopener">https://github.com/devnag/pytorch-generative-adversarial-networks；https://medium.com/@devnag/generative-adversarial-networks-gans-in-50-lines-of-code-pytorch-e81b79659e3f）</a></p><p>Torch 和 Lua（<a href="https://github.com/lopezpaz/metal）" target="_blank" rel="noopener">https://github.com/lopezpaz/metal）</a></p><p>虽然这些不是最前沿的内容，但它们对于掌握理念很有帮助。</p><p>接下来我将按照粗略的时间顺序描述最近这些年来出现的GANs相关的一些进展和类型。</p><h1 id="深度卷积生成式对抗网络（Deep-Convolutional-GANs-DCGANs）"><a href="#深度卷积生成式对抗网络（Deep-Convolutional-GANs-DCGANs）" class="headerlink" title="深度卷积生成式对抗网络（Deep Convolutional GANs, DCGANs）"></a>深度卷积生成式对抗网络（Deep Convolutional GANs, DCGANs）</h1><p>DCGANs是GAN结构的最早的重要发展。就训练和生成更高质量的样本来说，DCGANs更加稳定。</p><p>论文链接：<a href="https://arxiv.org/abs/1511.06434" target="_blank" rel="noopener">https://arxiv.org/abs/1511.06434</a></p><p>DCGAN的作者们专注于提升初代GAN的框架结构。他们发现：</p><p>批次（Batch）的正态化在两个网络中都是必须要做的。</p><p>完全隐藏的连接层不是一个好的想法。</p><p>避免池化，只需卷积</p><p>修正线性单元（ReLU）激活函数非常有用。</p><p>DCGANs截至目前任然被时常提起，因为它们成为了实践和使用GANs的主要基准之一。</p><p>在这篇论文发布后不久，就在Theano, Torch, Tensorflow 和 Chainer 中出现了不同的可使用的实现方法，这些方法可以在你感兴趣的任何数据集上测试。所以，如果你遇到了生成后奇怪的数据集，你完全可以归咎于这些家伙。</p><h2 id="DCGANs的使用场景如下："><a href="#DCGANs的使用场景如下：" class="headerlink" title="DCGANs的使用场景如下："></a>DCGANs的使用场景如下：</h2><p>你想要比基础GANs表现更好（这是必须的）。基础GANs适用于简单的数据集，然而DCGANs比这要强得多。</p><p>你在寻找一种稳固的基准方法来比较你的新GAN算法。</p><p>从现在开始，除非特别说明，我接下来将要描述的所有GANs的类型都被假定为有DCGAN的结构。</p><h1 id="提升深度卷积生成式对抗网络（Improved-DCGANs）"><a href="#提升深度卷积生成式对抗网络（Improved-DCGANs）" class="headerlink" title="提升深度卷积生成式对抗网络（Improved DCGANs）"></a>提升深度卷积生成式对抗网络（Improved DCGANs）</h1><p>一系列提升先前的DCGAN的技术。例如，这一提升后的基准方法能够生成更好的高分辨率图像。</p><p>论文链接：<a href="https://arxiv.org/abs/1606.03498" target="_blank" rel="noopener">https://arxiv.org/abs/1606.03498</a></p><p>GANs的主要问题之一是收敛性。收敛性不是一定的，而且尽管DCGAN做了结构细化，训练过程仍可能非常不稳定。</p><p>在这篇论文里，作者们针对GAN训练过程提出了不同的增强方法。以下是其中一部分：</p><p>特征匹配：他们提出了一种新的目标函数，而不是让生成器尽可能地去蒙骗鉴别器。这个目标函数需要生成器生成的数据能够跟真实数据的统计量相匹配。在这种情况下，鉴别器只被用来指定哪些才是值得去匹配的统计量。</p><p>历史平均：在更新参数值时，把它们过去的值也纳入考虑。</p><p>单侧标签平滑：这一项非常简单：只要把你的鉴别器的目标输出值从[0=假图像，1=真图像]改成[0=假图像，0.9=真图像]。不错，这样就提升了训练效果。</p><p>虚拟批次正态化：通过使用从其他批次计算的统计量来避免依赖于同一批次的数据。这样的计算成本很高，所以它仅仅被用在生成器当中。</p><p>所有这些技术都使得模型在生成高分辨率图像时能表现得更好，而这正是GANs的弱项之一。</p><p>作为对比，请看在128x128图像上原始DCGAN和提升后的DCGAN的表现差异：</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424778/641" alt=""></p><p>这些本来都是狗的图片。正如你看到的，DCGAN表现很糟糕，而用improved DCGAN你至少可以看到一些包含狗的特征的内容。这也说明了GANs的另一局限——生成结构性的内容。</p><h2 id="Improved-DCGANs的使用场景如下"><a href="#Improved-DCGANs的使用场景如下" class="headerlink" title="Improved DCGANs的使用场景如下"></a>Improved DCGANs的使用场景如下</h2><p>生成更高分辨率的图像</p><h1 id="条件生成式对抗网络（Conditional-GANs，-cGANs"><a href="#条件生成式对抗网络（Conditional-GANs，-cGANs" class="headerlink" title="条件生成式对抗网络（Conditional GANs， cGANs)"></a>条件生成式对抗网络（Conditional GANs， cGANs)</h1><p>条件式生成式对抗网络使用额外的标签信息用于生成更高质量图片，并且使图片的呈现可控制。</p><p>论文链接：<a href="https://arxiv.org/abs/1411.1784" target="_blank" rel="noopener">https://arxiv.org/abs/1411.1784</a></p><p>CGANs是GAN框架的扩展。我们用条件信息Y来描述数据的某些特征。假设我们要处理面部图像，Y则可以用来描述头发颜色或者性别。然后这些属性被插入生成器和鉴别器。</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424779/641" alt=""></p><p>使用脸部特征信息的条件生成网络如上图所示</p><p>条件式生成对抗网络有两个很有意思的地方：</p><p>1、随着你不断给模型提供更多信息，GAN学习探索这些信息，然后产生更好的样本。</p><p>2、我们用两种方法来控制图片的呈现，在没有CGAN的时候所有图片信息使用Z编码。在CGAN下，我们加入了条件信息Y，于是Z和Y对不同信息进行编码。</p><p>例如，我们假设Y对手写数字0-9进行编码。Z对其他变量编码，这些变量可以是数字的风格比如（大小，粗细，旋转角度等。）</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424780/641" alt=""></p><p>MNIST(Mixed National Institute of Standards and Technology database,简单机器视觉数据集)样本中Z和Y的区别如上图。Z是行，Y是列；Z对数字的风格编码，Y对数字本身编码。</p><h1 id="最近的研究成果"><a href="#最近的研究成果" class="headerlink" title="最近的研究成果"></a>最近的研究成果</h1><p>在这个领域有很多有趣的文章，我介绍2个：</p><p>1、使用生成对抗网络学习在指定位置画画</p><p>（论文：<a href="https://arxiv.org/abs/1610.02454；代码：https://github.com/reedscot/nips2016）：这篇论文里作者设计了一个本文描述的方法来告诉GAN画什么，同时使用方框和标记告诉GAN绘画主体的位置。如下图示：" target="_blank" rel="noopener">https://arxiv.org/abs/1610.02454；代码：https://github.com/reedscot/nips2016）：这篇论文里作者设计了一个本文描述的方法来告诉GAN画什么，同时使用方框和标记告诉GAN绘画主体的位置。如下图示：</a></p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424781/641" alt=""></p><p>堆栈式GAN</p><p>（原文：<a href="https://arxiv.org/abs/1612.03242；代码：https://github.com/hanzhanggit/StackGAN）" target="_blank" rel="noopener">https://arxiv.org/abs/1612.03242；代码：https://github.com/hanzhanggit/StackGAN）</a></p><p>这篇文章和上一篇比较类似，这里作者同时使用2个GAN网络（阶段1和阶段2）用于提升图片的质量。第1阶段用来获得包含图片“基本”概念的低分辨率图片。第2阶段用更多的细节和更高的分辨率提炼第1阶段的图片。</p><p>这篇文章据我所知是生成高质量图片最好的模型之一，不信请看下图。</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424782/641" alt=""></p><h1 id="条件式生成网络的使用场景如下："><a href="#条件式生成网络的使用场景如下：" class="headerlink" title="条件式生成网络的使用场景如下："></a>条件式生成网络的使用场景如下：</h1><p>1、你有一个带标签的训练集，想提高生成图片的质量</p><p>2、你想对图片的某些特征进行精细的控制，比如在某个设定的位置生成特定大小的一只红色小鸟。</p><h1 id="最大信息化生成对抗网络（InfoGANs）"><a href="#最大信息化生成对抗网络（InfoGANs）" class="headerlink" title="最大信息化生成对抗网络（InfoGANs）"></a>最大信息化生成对抗网络（InfoGANs）</h1><p>GANs可以在无监督模式下对噪声向量Z的一部分有意义的图像特征进行编码。比如对某一数字的旋转编码。</p><p>论文链接：<a href="https://arxiv.org/abs/1606.03657" target="_blank" rel="noopener">https://arxiv.org/abs/1606.03657</a></p><p>你是否曾想过GAN里输入噪声Z对哪些信息进行编码？一般来说它对图片的不同类型的特征使用一种非常“嘈杂”的方式编码。例如，取Z向量的一个位置 并且插入一个-1到1之间的值。这是下图所示的MNIST数据集的训练模型。</p><p>左上图像是对Z插值取-1的时候，右下是插值为1的时候</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424783/641" alt=""></p><p>上图中，生成的图片看似是从4慢慢变成“Y”（很像是4和9的混合体）。</p><p>这就是我之前所说的使用一种“嘈杂”的方式进行编码：Z的一个位置是图像多个特征的一个参数。</p><p>这种情况下，这个位置改变了数字自己（某种程度，从4变成9）和他的风格（从粗体变成斜体）。</p><p>然而，你无法定义Z的位置的确切含义。</p><p>如果使用Z的一些位置来代表唯一且受限的信息，正如CGAN里的条件信息Y呢？</p><p>例如，第一个位置是0-9之间的数值来控制数字，第二个位置来控制数字的旋转，这就是文中作者想要表达的。</p><p>有意思的是，与CGANS不同，他们使用无监督的方法实现并不需要标签信息。</p><p>他们是这么做的，把Z向量拆分成两部分：C和Z</p><p>C对数据分布的语义特征进行编码</p><p>Z对分布的所有非结构化噪声进行编码</p><p>如何用C对这些特征编码呢？</p><p>通过改变损失函数避免C被GAN简单地忽略掉。所以他们使用一种信息论正则化确保C与生成器分布之间的互信息[z1] （mutual information）。</p><p>也就是说，如果C变化，生成的图像也会变化。这导致你不能明确的控制什么类型的信息将被引入C中。但是C的每一个位置都有独特的含义。</p><p>如下图所示：</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424784/641" alt=""></p><p>C的第一位置编码数字的类别，第二位置编码旋转方向。</p><p>然而，不使用标签信息的代价是，这些编码仅对非常简单的数据集有效比如MNIST库里的数字。</p><p>并且，你还需要手工设定C的每个位置。例如文章中作者需要定义C的第一位置是介于0-9的整数以对应数据集的十类数字。你会认为这样不是百分百的无监督，因为需要手动给模型提供一些细节。</p><p>你可能需要用到infoGANs的场景如下：</p><p>1、数据集不太复杂</p><p>2、你想训练一个CGAN模型但是缺少标签信息</p><p>3、你想知道数据集主要有意义的图像特征并且对他们进行控制</p><h1 id="生成式对抗网络（Wasserstein-GANs）"><a href="#生成式对抗网络（Wasserstein-GANs）" class="headerlink" title="生成式对抗网络（Wasserstein GANs）"></a>生成式对抗网络（Wasserstein GANs）</h1><p>修改损失函数以引入Wasserstein距离，这样以来WassGANs 的损失函数同图片质量建立联系。同时训练的稳定性有所提升而并非依赖于架构。</p><p>论文链接：<a href="https://arxiv.org/abs/1701.07875" target="_blank" rel="noopener">https://arxiv.org/abs/1701.07875</a></p><p>GANs 经常存在收敛问题，所以你并不知道什么时候该停止训练。换句话说损失函数同图像质量无关，这可是个大难题。</p><p>因为：</p><p>你需要不断的查看样本来确认模型训练是否正确</p><p>因为不收敛，你不知道何时该停止训练</p><p>也没有数值指示你调参的效果如何</p><p>举个例子，看下面DCGAN的两个无信息损失函数完美的生成MNIST样本的迭代图[z2] </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424786/641" alt=""></p><p>仅看上图你知道什么时候该停止训练吗？</p><p>这种可解释性的问题也是Wasserstein GANs要解决的。</p><p>怎样解决呢？</p><p>如果真实和伪造样本的分布不重叠（一般都是这样）GANs可以用来最小化JS散度(Jensen-Shannon divergence)直到0。</p><p>所以与其最小化JS散度，作者使用Wasserstein距离来描述不同分布中点之间的距离。</p><p>思路大概如此，如果你想了解更多，我强烈建议你看这篇文章（<a href="https://paper.dropbox.com/doc/Wasserstein-GAN-GvU0p2V9ThzdwY3BbhoP7）或者更深入分析或者阅读本论文。" target="_blank" rel="noopener">https://paper.dropbox.com/doc/Wasserstein-GAN-GvU0p2V9ThzdwY3BbhoP7）或者更深入分析或者阅读本论文。</a></p><p>WassGAN有和图像质量关联的损失函数并且能够收敛。同时他更加稳定而不依赖GAN的结构。比如，就算你去掉批标准化或者使用怪异的结构，它仍能很好的工作。 </p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424787/641" alt=""></p><p>这就是他的损失函数图，损失越低，图像质量越好。完美！</p><p>Wasserstein GANs的应用场景如下：</p><p>你需要寻找最先进的且有最高训练稳定性的GAN</p><p>你想要一个有信息量且可以解读的损失函数。</p><h1 id="加强版WGANs-Improved-WGANs-WGAN-GP"><a href="#加强版WGANs-Improved-WGANs-WGAN-GP" class="headerlink" title="加强版WGANs (Improved WGANs , WGAN-GP)"></a>加强版WGANs (Improved WGANs , WGAN-GP)</h1><p>这个模型使用的是Wasserstein GANs，并应用了梯度惩罚（gradient penalty）来代替权重剪辑（weight clipping）及其带来的一些不需要的行为。这个方法可以带来更高的聚合度、更高质量的样本和更稳定的训练。</p><p>论文：<a href="https://arxiv.org/abs/1704.00028" target="_blank" rel="noopener">https://arxiv.org/abs/1704.00028</a></p><p>代码：<a href="https://github.com/igul222/improved_wgan_training" target="_blank" rel="noopener">https://github.com/igul222/improved_wgan_training</a></p><p>针对问题：WGANs有时候会生成一些质量不佳的样本，或者是无法在某些集合中生成聚集。这种现象主要是由于为了满足Lipschitz限制而在WGANs中应用权重剪辑（即把所有权重限制在一个由最小值和最大值组成的范围内）所造成的。如果你对这个限制不太了解，那么你只需要记住它是WGANs正常运行的一个必要条件。那么为什么权重剪辑会造成如上问题呢？这是因为它会使WGANs偏向于使用那些过于简单的函数，这意味着当WGANs想要模拟复杂的数据时，简单地估算近似值令其无法得到准确的结果（如下图所示）。另外，权重剪辑也使得梯度爆炸与消失更容易发生。</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424788/641" alt=""></p><p> 左图是使用了简单的函数导致无法正确模拟高斯为8的WGANs运行后的结果，而右图则是经过使用了更复杂的函数的WGAN-GP矫正后的图像。</p><p>梯度惩罚（Gradient penalty）：所以我们该如何摆脱权重剪辑带来的不良效果呢？</p><p>WGAN-GP的作者（GP表示梯度惩罚）提出了使用另一种叫梯度惩罚的办法来加强Lipschitz限制的建议。原则上，梯度惩罚的原理是对某些梯度实行了均值为1的限制。对于那些均值偏离于1的梯度将会实施惩罚（减少权重），这也是为什么它被称为梯度惩罚的原因。</p><p>优点：由于在训练中使用了梯度惩罚而不是权重剪辑，WGANs获得了更快的聚合。另外，因为不再必须对超参数进行调整，而且网络架构的使用也不再像之前那么重要，训练在某种程度上变得更加稳定。虽然很难说清楚到底有多少，但这些WGAN-GP确实产生了更高质量的样本。在已验证并测试的结构上，这些样本的质量和作为基线的WGANs产出的结果非常相似。</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424789/641" alt=""></p><p>基于同一个网络架构，WGANs-GP明显在生成高质量样本上更有优势，而GANs则不然。</p><p>比如，据作者所知，这是首次GANs能够在残差网络的结构上运行：</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424790/641" alt=""></p><p>为了不超出本篇博文的范畴，还有许多其他有趣的细节我这里就不一一阐述了。如果你对这个训练方式有兴趣想要了解更多（例如，为什么梯度惩罚只应用于“某些”特定梯度，又或者怎样才能把这个模型用于文本数据样本），我会建议你自行阅读一下该论文。</p><p>强化版的WGAN的优点如下：</p><p>l  更快的聚合</p><p>l  可以在各种各样的网络架构和数据集中使用</p><p>l  不像其他的GANs一样需要太多的超参数调整</p><h1 id="边界均衡GANs-Boundary-Equilibrium-GANs，BEGANs"><a href="#边界均衡GANs-Boundary-Equilibrium-GANs，BEGANs" class="headerlink" title="边界均衡GANs(Boundary Equilibrium GANs，BEGANs)"></a>边界均衡GANs(Boundary Equilibrium GANs，BEGANs)</h1><p>GANs使用一个自动编码器作为均衡判别器。它们可在一个简单的架构上被训练出来，且合成一个动态的可以使得均衡器和生成器在训练中两者平衡的阶段。</p><p>论文：<a href="https://arxiv.org/abs/1703.10717" target="_blank" rel="noopener">https://arxiv.org/abs/1703.10717</a></p><p>一个有趣的事实：BEGANs 和WGAN-GP几乎是同一天在论文上发表。</p><p>理念：让BEGAN区别于其他GANs的原因有两个，一是它们使用了一个自动编码器作为均衡判别器（这一点和EBGANs类似），二是为了适用于这个情境的一个特别的损失函数。这种选择背后的理由是什么呢？强迫我们使用像素重建损失函数来制造模糊生成样本的自动编码器是否也不是传说中那么“邪恶”呢？</p><p>要回答这些问题，我们需要考虑以下两点：</p><ol><li><p>为什么要重建像素损失？作者解释说这么做的原因是，对于那些符合对像素损失的重建分布模式的假设，我们可以依赖它们去匹配样本的分布模式。</p></li><li><p>而这又引出了下一个问题：如何才可以达到这一目的呢？一个重要的观点是，从自动编码器/均衡判别器形成的像素重建损失（换言之，就是基于某个图像输入，输出最优化的像素重建）并不是经BEGANs最小化后生成的最终损失。可以说，这个重建损失不过是为了计算最终损失的其中一个步骤。而最终损失的计算这是通过衡量基于真实数据的重建损失和基于生成数据的重建损失之间的Wasserstein距离（是的，现在它无处不在）。</p></li></ol><p>这么一看似乎这其中的信息量非常大，但我可以保证，一旦我们看清损失函数是如何作用于生成器和判别器，这一切将会变得再明白不过了。</p><p>生成器专注于生成那些能够让判别器良好重建的图像</p><p>而判别器则致力于尽可能良好地重建真实图像，同时重建那些误差最大化的生成图像。 </p><p>差异因数：另一个有趣的成分是所谓的差异因数。通过这个因子你能控制判别器不同程度的表现，决定它能只专注于形成对真实图像的完美重建（注重质量），又或是更侧重在区分真实图像和生成图像（注重多样性）。然后，它们就能更进一步地利用这个差异因数去保持生成器和判别器在训练中的平衡。如同WGANs,这一模型同样应用均衡状态作为调整和图像质量相关的聚合度的方法。然而，和WGANs (与 WGANs-GP)不尽相同的是，它们利用了Wasserstein 距离，而非Lipschitz限制，去测量均衡水平。</p><p>结论：BEGANs并不需要任何花里胡哨的网络架构就可以训练得当。如同在论文中所述的，“不批量标准化，不丢弃神经网络元，无反卷积，也没有卷积滤镜的指数化增长”，这些生成样本(128x128)的质量已经相当好了。</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424791/641" alt=""></p><p>然而，在这篇论文中有一个重要的细节值得我们注意：论文中使用的未发表数据集的样本量是目前广为使用的 CelebA数据集的两倍之大。因此，为了得到更具有现实意义的定性比较，我邀请大家去查看那些使用了CelebA的公开模型（<a href="https://github.com/carpedm20/BEGAN-tensorflow），并看看那些由此生成的样本。" target="_blank" rel="noopener">https://github.com/carpedm20/BEGAN-tensorflow），并看看那些由此生成的样本。</a></p><p>最后，如果你对BEGANs感兴趣想要了解更多，我建议你阅读一下这篇博文（<a href="https://blog.heuritech.com/2017/04/11/began-state-of-the-art-generation-of-faces-with-generative-adversarial-networks/），里面对BEGANs有更多详细的介绍。" target="_blank" rel="noopener">https://blog.heuritech.com/2017/04/11/began-state-of-the-art-generation-of-faces-with-generative-adversarial-networks/），里面对BEGANs有更多详细的介绍。</a></p><p>你需要BEGANs的原因一般会和需要使用WGANs-GP的情况差不多。这两个模型的结果往往非常相似（稳定的训练、简单的架构、和图像质量相关的损失函数），而两者的不同主要在于过程中使用的手段。由于评估生成式模型本身就不是一件容易的事，我们很难去说清楚孰优孰劣。但就像Theisetal在他们的论文（<a href="https://arxiv.org/abs/1511.01844）中所说的，选择一个评估的方法，不然就依据实际情况来做判定。在这种情况下，WGANs-GP具有更高的初始分数（Inception" target="_blank" rel="noopener">https://arxiv.org/abs/1511.01844）中所说的，选择一个评估的方法，不然就依据实际情况来做判定。在这种情况下，WGANs-GP具有更高的初始分数（Inception</a> score）而BEGANs则能生成非常优质的图像，两者都是未来最值得研究和最具有革新意义的模型。</p><h1 id="渐进式发展生成对抗网络（Progressive-growing-of-GANs，ProGANs）"><a href="#渐进式发展生成对抗网络（Progressive-growing-of-GANs，ProGANs）" class="headerlink" title="渐进式发展生成对抗网络（Progressive growing of GANs，ProGANs）"></a>渐进式发展生成对抗网络（Progressive growing of GANs，ProGANs）</h1><p>在训练过程中,逐步嵌入新的高分辨率的层次，来生成相当逼真的图像。更多的进步以及新兴的考核机制也相继涌现。新生成的图片质量高得惊人。</p><p>论文：<a href="https://arxiv.org/abs/1710.10196" target="_blank" rel="noopener">https://arxiv.org/abs/1710.10196</a></p><p>代码：<a href="https://github.com/tkarras/progressive_growing_of_gans" target="_blank" rel="noopener">https://github.com/tkarras/progressive_growing_of_gans</a></p><p>生成高分辨率的图像是个大挑战。图片越大，对生成对抗网络来说越可能失败。因为它要求模型学习辨别更细微、复杂的细节。为了使大家更好理解，在这篇文章发表之前，GANs产出图像的合理尺寸大概是256x256。渐进式生成对抗网络（ProGANs）将它提升到了一个全新水准-生成尺寸为1024x1024的图片。我们来看看它是如何实现的：</p><p>理念: ProGANs-建立于WFGANs-GP-引入了一种灵活地将新层次逐渐嵌入到训练时间的方式。每一层都利用上采样增强了生成器和判别器里的图像分辨率。</p><p>步骤分解如下：</p><p>1 首先，利用低像素图片训练生成器和判别器。</p><p>2 在一定时间点（开始聚合的时候），提高分辨率。这是通过“迁移阶段”/“平滑技术”非常完美地实现的。</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424792/641" alt=""></p><p>新的层次是借助α控制的一系列细微的线性步骤添加，而不是简单粗暴地加上一层。</p><p>我们看看生成器里都发生了什么。最初，当α = 0，无变化。产出主要来自于前一低分辨率层（16x16）的贡献。</p><p>当提升α的值，新一层（32x32）开始通过反向传播调整它的权重。最后，当α趋近于1，我们几乎可以跳过32x32这一层的操作。同理适用于判别器，当然是以完全相反的方式：不是使图片更大，而是更小。</p><p>3 一旦转化完成，继续训练生成器与判别器。假如得到的图片质量分辨率不达标，请回到步骤2。</p><p>不过，等等……对新的高分辨率图像的上采样与串联不是已经在StackGANs（还有新StackGANs++）里实现了么？没错，也不全对。首先，StackGANs是将文字翻译为图像的条件GANs，它引入文字描述作为额外输入值。而ProGANs没有使用任何假定式的信息。更加有趣的是，尽管StackGANs和ProGANs都对更高分辨率的图片串联，StackGANs需要尽量多的根据上采样独立配对的GANs-需单独训练，你想进行上采样3次么？那你要训练3个GANs。另一方面，在ProGANs模型中只有一个单一的GAN被训练。在这一训练中，更多的上采样层被逐步叠加至上采样的图片，上采样3次的尝试只是增加更多的层在训练时间上，而不是抓3个新的GANs逐次训练。总而言之，ProGANs采用一种与StackGANs相似的理念，它完美地完成，而且在没有额外信息的情况下产出更好的结果。</p><p>结果。作为渐进训练的结果，ProGANs生成的图片有更高的质量，而针对1024x1024图像的训练时间也缩减了5.4倍。背后的理由是，ProGAN不需要一次性学习所有大、小规模的典型图片。在ProGAN模型里，小规模的图像最先被学习（低分辨率层次聚合），然后模型可以自行聚焦在完善大尺寸图片的结构上（新的高分辨率层次聚合）。</p><p>其他的提升。</p><p>另外，该论文提出了新的设计决策来更进一步提升模型的性能。概述如下：</p><p>小批量标准差：将标准差运用于这些小批量的所有特征属性，允许每个小批量有相似的统计数据。然后，总结为一个新的层的单一值，嵌入至网络尾端。</p><p>均衡的学习速率：通过在训练过程中持续地将每个权重除以一个常量，确保所有权重的学习速度一致。</p><p>像素标准化：在生成器上，每一个矢量的特征是根据其卷基层标准化的（论文里的精确公式）。这是为了防止生成器和判别器的梯度量级的逐步上涨。</p><p>CelebA-HQ（CelebA高级版）。 值得一提的是，作者为了实现高分辨率训练，改进了原始的CelebA，从而得到了CelebA-HQ，简单来说，它们移除原像，应用高斯滤波器来生成一种景深效果，然后探测到人脸图像，得到一个1024x1024尺寸的裁剪图片，在这一流程之后，他们从202k张图片里保留了最优质的30k张图片。</p><h1 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h1><p>最后，我们介绍一种新的评估方式：</p><p>背后的理念是：生成图像的本地图形结构应该与训练图像的结构匹配。</p><p>那么如何测量本地结构？</p><p>使用Laplacian pyramid算法，你可以得到不同的空间频段，来作为描述符。</p><p>最后，我们从生成图像和原始图像中提取描述符，将其规范化，然后使用著名的Wasserstein距离检测它们有多接近。距离越近越好。</p><p>你可能会想在以下场景使用ProGANs的使用场景如下：</p><p>假如你希望获得最完美的结果。但是考虑到…</p><p>你需要花大量时间搭建模型：我们需要在一个单一的NVIDIA Tesla P100 GPU上花20天训练网络</p><p>如果你开始怀疑世界的真实性。GANs的下一轮迭代可能会给你一些比现实生活还真实的样本参考。</p><h1 id="循环生成对抗网络（Cycle-GANs）"><a href="#循环生成对抗网络（Cycle-GANs）" class="headerlink" title="循环生成对抗网络（Cycle GANs）"></a>循环生成对抗网络（Cycle GANs）</h1><p>论文：<a href="https://arxiv.org/pdf/1703.10593.pdf" target="_blank" rel="noopener">https://arxiv.org/pdf/1703.10593.pdf</a></p><p>​</p><p>代码：<a href="https://github.com/junyanz/CycleGAN" target="_blank" rel="noopener">https://github.com/junyanz/CycleGAN</a></p><p>循环GANs是目前最先进的用于图片互译的生成对抗网络。</p><p><img src="https://inews.gtimg.com/newsapp_bt/0/2409424793/641" alt=""></p><p>这些GANs并不需要配对的数据集来学习不同领域之间的转译，这点很棒，因为配对数据集很难获取。然而CycleGANs仍然需要通过两个不同领域的数据X和Y（例如X是普通的马匹，Y是斑马）来训练。为了将转换限制于从一个领域到另一领域的范畴，他们使用所谓的“循环一致性损失”。大意是，如果可以将马匹A转化成斑马A，那么当你将斑马A逆转化，应该能得到马匹A才对。</p><p>这种从一个领域到另一领域的变换与另一热门概念“神经风格转换”是有区别的。后者结合了一副图像的“内容”与另一图像的“样式”。循环GANs则是在一个领域转换至另一领域的过程中学习总结非常高层次的特征。因此，循环GANs更笼统，并且适用于多种映射关系，例如将一个速写转化为真实物品。 </p><p>总结一下，生成对抗网络在近期取得了两大显著进步：</p><p>WGANS-GP和BEGANs</p><p>尽管理论研究方向不同，但它们提供了相似的优点。其次，我们有ProGANs（基于WGANS-GP），它打开了一条通往生成高清图像的清晰路径。同时，循环GANs让我们看到了GANs从数据集提取有用信息的潜力以及这些信息如何转入至另一非关联的数据分布。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;生成对抗网络（GAN）一经提出就风光无限，更是被Yann Lecun誉为“十年来机器学习领域最有趣的想法”。&lt;/p&gt;
&lt;p&gt;GAN“左右互搏
      
    
    </summary>
    
      <category term="机器学习" scheme="http://berryk.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法：十大算法简介</title>
    <link href="http://berryk.top/archives/873fb2b4.html"/>
    <id>http://berryk.top/archives/873fb2b4.html</id>
    <published>2018-02-11T17:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在机器学习中，有一种叫做「没有免费的午餐」的定理。简而言之，它指出没有任何一种算法对所有问题都有效，在监督学习（即预测建模）中尤其如此。</p><p>例如，你不能说神经网络总是比决策树好，反之亦然。有很多因素在起作用，例如数据集的大小和结构。</p><p>因此，你应该针对具体问题尝试多种不同算法，并留出一个数据「测试集」来评估性能、选出优胜者。</p><p>当然，你尝试的算法必须适合你的问题，也就是选择正确的机器学习任务。打个比方，如果你需要打扫房子，你可能会用吸尘器、扫帚或拖把，但是你不会拿出铲子开始挖土。</p><h1 id="大原则"><a href="#大原则" class="headerlink" title="大原则"></a>大原则</h1><p>不过也有一个普遍原则，即所有监督机器学习算法预测建模的基础。</p><pre><code>机器学习算法被描述为学习一个目标函数 f，该函数将输入变量 X 最好地映射到输出变量 Y：Y = f(X)</code></pre><p>这是一个普遍的学习任务，我们可以根据输入变量 X 的新样本对 Y 进行预测。我们不知道函数 f 的样子或形式。如果我们知道的话，我们将会直接使用它，不需要用机器学习算法从数据中学习。</p><p>最常见的机器学习算法是学习映射 Y = f(X) 来预测新 X 的 Y。这叫做预测建模或预测分析，我们的目标是尽可能作出最准确的预测。</p><p>对于想了解机器学习基础知识的新手，本文将概述数据科学家使用的 top 10 机器学习算法。</p><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>线性回归可能是统计学和机器学习中最知名和最易理解的算法之一。</p><p>预测建模主要关注最小化模型误差或者尽可能作出最准确的预测，以可解释性为代价。我们将借用、重用包括统计学在内的很多不同领域的算法，并将其用于这些目的。</p><p>线性回归的表示是一个方程，它通过找到输入变量的特定权重（称为系数 B），来描述一条最适合表示输入变量 x 与输出变量 y 关系的直线。</p><p><img src="https://image.jiqizhixin.com/uploads/editor/ed0bab7f-c6fa-49af-b423-4d883c7346e9/89333640.jpeg" alt=""></p><p>线性回归</p><p>例如：y = B0 + B1 * x</p><p>我们将根据输入 x 预测 y，线性回归学习算法的目标是找到系数 B0 和 B1 的值。</p><p>可以使用不同的技术从数据中学习线性回归模型，例如用于普通最小二乘法和梯度下降优化的线性代数解。</p><p>线性回归已经存在了 200 多年，并得到了广泛研究。使用这种技术的一些经验是尽可能去除非常相似（相关）的变量，并去除噪音。这是一种快速、简单的技术，可以首先尝试一下。</p><h1 id="Logistic-回归"><a href="#Logistic-回归" class="headerlink" title="Logistic 回归"></a>Logistic 回归</h1><p>Logistic 回归是机器学习从统计学中借鉴的另一种技术。它是解决二分类问题的首选方法。</p><p>Logistic 回归与线性回归相似，目标都是找到每个输入变量的权重，即系数值。与线性回归不同的是，Logistic 回归对输出的预测使用被称为 logistic 函数的非线性函数进行变换。</p><p>logistic 函数看起来像一个大的 S，并且可以将任何值转换到 0 到 1 的区间内。这非常实用，因为我们可以规定 logistic 函数的输出值是 0 和 1（例如，输入小于 0.5 则输出为 1）并预测类别值。</p><p><img src="https://image.jiqizhixin.com/uploads/editor/f7e4125e-964b-4509-8019-0076cfc11618/18325640-2.jpeg" alt=""></p><p>Logistic 回归</p><p>由于模型的学习方式，Logistic 回归的预测也可以作为给定数据实例（属于类别 0 或 1）的概率。这对于需要为预测提供更多依据的问题很有用。</p><p>像线性回归一样，Logistic 回归在删除与输出变量无关的属性以及非常相似（相关）的属性时效果更好。它是一个快速的学习模型，并且对于二分类问题非常有效。</p><h1 id="线性判别分析（LDA）"><a href="#线性判别分析（LDA）" class="headerlink" title="线性判别分析（LDA）"></a>线性判别分析（LDA）</h1><p>Logistic 回归是一种分类算法，传统上，它仅限于只有两类的分类问题。如果你有两个以上的类别，那么线性判别分析是首选的线性分类技术。</p><p>LDA 的表示非常简单直接。它由数据的统计属性构成，对每个类别进行计算。单个输入变量的 LDA 包括：</p><ul><li><p>每个类别的平均值；</p></li><li><p>所有类别的方差。<br><img src="https://image.jiqizhixin.com/uploads/editor/ae1b0ae8-02f4-45f4-8e2f-7e8fd091732f/46292640-3.jpeg" alt=""><br>线性判别分析</p></li></ul><p>进行预测的方法是计算每个类别的判别值并对具备最大值的类别进行预测。该技术假设数据呈高斯分布（钟形曲线），因此最好预先从数据中删除异常值。这是处理分类预测建模问题的一种简单而强大的方法。</p><h1 id="分类与回归树"><a href="#分类与回归树" class="headerlink" title="分类与回归树"></a>分类与回归树</h1><p>决策树是预测建模机器学习的一种重要算法。</p><p>决策树模型的表示是一个二叉树。这是算法和数据结构中的二叉树，没什么特别的。每个节点代表一个单独的输入变量 x 和该变量上的一个分割点（假设变量是数字）。<br><img src="https://image.jiqizhixin.com/uploads/editor/e488ceae-30b5-495b-84e3-2e47ea0629d6/99736640-4.jpeg" alt=""></p><p>决策树</p><p>决策树的叶节点包含一个用于预测的输出变量 y。通过遍历该树的分割点，直到到达一个叶节点并输出该节点的类别值就可以作出预测。</p><p>决策树学习速度和预测速度都很快。它们还可以解决大量问题，并且不需要对数据做特别准备。</p><h1 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h1><p>朴素贝叶斯是一个简单但是很强大的预测建模算法。</p><p>该模型由两种概率组成，这两种概率都可以直接从训练数据中计算出来：1）每个类别的概率；2）给定每个 x 的值，每个类别的条件概率。一旦计算出来，概率模型可用于使用贝叶斯定理对新数据进行预测。当你的数据是实值时，通常假设一个高斯分布（钟形曲线），这样你可以简单的估计这些概率。<br><img src="https://image.jiqizhixin.com/uploads/editor/3335b686-f2e8-4691-9f36-e1bec3a3bf0e/34576640-5.jpeg" alt=""></p><p>贝叶斯定理</p><p>朴素贝叶斯之所以是朴素的，是因为它假设每个输入变量是独立的。这是一个强大的假设，真实的数据并非如此，但是，该技术在大量复杂问题上非常有用。</p><h1 id="k近邻算法"><a href="#k近邻算法" class="headerlink" title="k近邻算法"></a>k近邻算法</h1><p>KNN 算法非常简单且有效。KNN 的模型表示是整个训练数据集。是不是很简单？</p><p>KNN 算法在整个训练集中搜索 K 个最相似实例（近邻）并汇总这 K 个实例的输出变量，以预测新数据点。对于回归问题，这可能是平均输出变量，对于分类问题，这可能是众数（或最常见的）类别值。</p><p>诀窍在于如何确定数据实例间的相似性。如果属性的度量单位相同（例如都是用英寸表示），那么最简单的技术是使用欧几里得距离，你可以根据每个输入变量之间的差值直接计算出来其数值。<br><img src="https://image.jiqizhixin.com/uploads/editor/fe51e19d-58e1-4284-b0d0-ec1895d650b8/97037640-6.jpeg" alt=""><br> K 近邻算法</p><p>KNN 需要大量内存或空间来存储所有数据，但是只有在需要预测时才执行计算（或学习）。你还可以随时更新和管理训练实例，以保持预测的准确性。</p><p>距离或紧密性的概念可能在非常高的维度（很多输入变量）中会瓦解，这对算法在你的问题上的性能产生负面影响。这被称为维数灾难。因此你最好只使用那些与预测输出变量最相关的输入变量。</p><h1 id="学习向量量化"><a href="#学习向量量化" class="headerlink" title="学习向量量化"></a>学习向量量化</h1><p>K 近邻算法的一个缺点是你需要遍历整个训练数据集。学习向量量化算法（简称 LVQ）是一种人工神经网络算法，它允许你选择训练实例的数量，并精确地学习这些实例应该是什么样的。</p><p><img src="https://image.jiqizhixin.com/uploads/editor/2637601c-abd4-495c-b1ab-d40c761caa4b/56330640-7.jpeg" alt=""></p><p>学习向量量化</p><p>LVQ 的表示是码本向量的集合。这些是在开始时随机选择的，并逐渐调整以在学习算法的多次迭代中最好地总结训练数据集。在学习之后，码本向量可用于预测（类似 K 近邻算法）。最相似的近邻（最佳匹配的码本向量）通过计算每个码本向量和新数据实例之间的距离找到。然后返回最佳匹配单元的类别值或（回归中的实际值）作为预测。如果你重新调整数据，使其具有相同的范围（比如 0 到 1 之间），就可以获得最佳结果。</p><p>如果你发现 KNN 在你的数据集上达到很好的结果，请尝试用 LVQ 减少存储整个训练数据集的内存要求。</p><h1 id="支持向量机（SVM）"><a href="#支持向量机（SVM）" class="headerlink" title="支持向量机（SVM）"></a>支持向量机（SVM）</h1><p>支持向量机可能是最受欢迎和最广泛讨论的机器学习算法之一。</p><p>超平面是分割输入变量空间的一条线。在 SVM 中，选择一条可以最好地根据输入变量类别（类别 0 或类别 1）对输入变量空间进行分割的超平面。在二维中，你可以将其视为一条线，我们假设所有的输入点都可以被这条线完全的分开。SVM 学习算法找到了可以让超平面对类别进行最佳分割的系数。</p><p><img src="https://image.jiqizhixin.com/uploads/editor/21e3bd19-0be5-430d-9fbe-cf1244e284ab/60573640-8.jpeg" alt=""></p><p>支持向量机</p><p>超平面和最近的数据点之间的距离被称为间隔。分开两个类别的最好的或最理想的超平面具备最大间隔。只有这些点与定义超平面和构建分类器有关。这些点被称为支持向量，它们支持或定义了超平面。实际上，优化算法用于寻找最大化间隔的系数的值。</p><p>SVM 可能是最强大的立即可用的分类器之一，值得一试。</p><h1 id="Bagging-和随机森林"><a href="#Bagging-和随机森林" class="headerlink" title="Bagging 和随机森林"></a>Bagging 和随机森林</h1><p>随机森林是最流行和最强大的机器学习算法之一。它是 Bootstrap Aggregation（又称 bagging）集成机器学习算法的一种。</p><p>bootstrap 是从数据样本中估算数量的一种强大的统计方法。例如平均数。你从数据中抽取大量样本，计算平均值，然后平均所有的平均值以便更好的估计真实的平均值。</p><p>bagging 使用相同的方法，但是它估计整个统计模型，最常见的是决策树。在训练数据中抽取多个样本，然后对每个数据样本建模。当你需要对新数据进行预测时，每个模型都进行预测，并将所有的预测值平均以便更好的估计真实的输出值。</p><p><img src="https://image.jiqizhixin.com/uploads/editor/08544c7b-ffc1-44f2-992c-120628bbe9d9/02248640-9.jpeg" alt=""><br>随机森林</p><p>随机森林是对这种方法的一种调整，在随机森林的方法中决策树被创建以便于通过引入随机性来进行次优分割，而不是选择最佳分割点。</p><p>因此，针对每个数据样本创建的模型将会与其他方式得到的有所不同，不过虽然方法独特且不同，它们仍然是准确的。结合它们的预测可以更好的估计真实的输出值。</p><p>如果你用方差较高的算法（如决策树）得到了很好的结果，那么通常可以通过 bagging 该算法来获得更好的结果。</p><h1 id="Boosting-和-AdaBoost"><a href="#Boosting-和-AdaBoost" class="headerlink" title="Boosting 和 AdaBoost"></a>Boosting 和 AdaBoost</h1><p>Boosting 是一种集成技术，它试图集成一些弱分类器来创建一个强分类器。这通过从训练数据中构建一个模型，然后创建第二个模型来尝试纠正第一个模型的错误来完成。一直添加模型直到能够完美预测训练集，或添加的模型数量已经达到最大数量。</p><p>AdaBoost 是第一个为二分类开发的真正成功的 boosting 算法。这是理解 boosting 的最佳起点。现代 boosting 方法建立在 AdaBoost 之上，最显著的是随机梯度提升。<br><img src="https://image.jiqizhixin.com/uploads/editor/5bc1b087-0e9d-4a61-8e06-ebccc42162c4/39628640-11.jpeg" alt=""></p><p>AdaBoost</p><p>AdaBoost 与短决策树一起使用。在第一个决策树创建之后，利用每个训练实例上树的性能来衡量下一个决策树应该对每个训练实例付出多少注意力。难以预测的训练数据被分配更多权重，而容易预测的数据分配的权重较少。依次创建模型，每个模型在训练实例上更新权重，影响序列中下一个决策树的学习。在所有决策树建立之后，对新数据进行预测，并且通过每个决策树在训练数据上的精确度评估其性能。</p><p>因为在纠正算法错误上投入了太多注意力，所以具备已删除异常值的干净数据非常重要。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>初学者在面对各种机器学习算法时经常问：「我应该用哪个算法？」这个问题的答案取决于很多因素，包括：（1）数据的大小、质量和特性；（2）可用的计算时间；（3）任务的紧迫性；（4）你想用这些数据做什么。</p><p>即使是经验丰富的数据科学家在尝试不同的算法之前，也无法分辨哪种算法会表现最好。虽然还有很多其他的机器学习算法，但本篇文章中讨论的是最受欢迎的算法。如果你是机器学习的新手，这将是一个很好的学习起点。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在机器学习中，有一种叫做「没有免费的午餐」的定理。简而言之，它指出没有任何一种算法对所有问题都有效，在监督学习（即预测建模）中尤其如此。&lt;/
      
    
    </summary>
    
      <category term="机器学习" scheme="http://berryk.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer（三）：7-13</title>
    <link href="http://berryk.top/archives/6f0da7d6.html"/>
    <id>http://berryk.top/archives/6f0da7d6.html</id>
    <published>2018-02-10T10:09:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fibonacci数列"><a href="#Fibonacci数列" class="headerlink" title="Fibonacci数列"></a>Fibonacci数列</h1><h2 id="剑7-斐波那契数列"><a href="#剑7-斐波那契数列" class="headerlink" title="剑7-斐波那契数列"></a>剑7-斐波那契数列</h2><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。<br>n&lt;=39<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Fibonacci</span><span class="params">(self,n)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> n &gt;= <span class="number">3</span>:</span><br><span class="line">            s = []*n</span><br><span class="line">            s.append(<span class="number">1</span>)</span><br><span class="line">            s.append(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,n):</span><br><span class="line">                s.append(s[i<span class="number">-1</span>]+s[i<span class="number">-2</span>])</span><br><span class="line">            <span class="keyword">return</span> s[n<span class="number">-1</span>]</span><br></pre></td></tr></table></figure></p><h2 id="剑8-跳台阶"><a href="#剑8-跳台阶" class="headerlink" title="剑8-跳台阶"></a>剑8-跳台阶</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><p>分析：</p><p>1.假设当有n个台阶时假设有f(n)种走法。<br>2.青蛙最后一步要么跨1个台阶要么跨2个台阶。<br>3.当最后一步跨1个台阶时即之前有n-1个台阶，根据1的假设即n-1个台阶有f(n-1)种走法。</p><ol><li>当最后一步跨2个台阶时即之前有n-2个台阶，根据1的假设即n-2个台阶有f(n-2 )种走法。<br>5.显然n个台阶的走法等于前两种情况的走法之和即f(n)=f(n-1)+f(n-2)。<br>6.找出递推公式后要找公式出口，即当n为1、2时的情况，显然n=1时f(1)等于1，f(2)等于2</li><li>| 1, (n=1)<br>f(n) =  |2, (n=2)<br>| f(n-1)+f(n-2) ,(n&gt;2,n为整数)</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> number &lt;=<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">elif</span> number &lt;= <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">return</span> number</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            a = <span class="number">1</span></span><br><span class="line">            b = <span class="number">2</span></span><br><span class="line">            <span class="comment">#a,b=1,2</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,number):</span><br><span class="line">                temp = a+b</span><br><span class="line">                a = b</span><br><span class="line">                b = temp</span><br><span class="line">                <span class="comment">#a,b = b,a+b</span></span><br><span class="line">            <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><p>其中<code>a,b=a,a+b</code>是指：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t=a</span><br><span class="line">a=b</span><br><span class="line">b=b+t</span><br></pre></td></tr></table></figure></p><p>也就是，此时a加的是未改变之前的a。举个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a，b=<span class="number">0</span>,<span class="number">1</span> <span class="comment">#复合赋值 实际上就是a=0,b=1</span></span><br><span class="line"><span class="keyword">while</span>     </span><br><span class="line">b&lt;<span class="number">10</span></span><br><span class="line">print(b)</span><br><span class="line">a,b=b,a+b </span><br><span class="line"><span class="comment">#实际上还是复合赋值a=b,b=a+b;那输出结果将是</span></span><br><span class="line">a=<span class="number">0</span>  b=<span class="number">1</span>     <span class="number">1</span></span><br><span class="line">a=<span class="number">1</span>  b=<span class="number">1</span>     <span class="number">1</span></span><br><span class="line">a=<span class="number">1</span>  b=<span class="number">2</span>     <span class="number">2</span></span><br><span class="line">a=<span class="number">2</span>  b=<span class="number">3</span>     <span class="number">3</span></span><br><span class="line">a=<span class="number">3</span>  b=<span class="number">5</span>     <span class="number">5</span></span><br><span class="line">a=<span class="number">5</span>  b=<span class="number">8</span>     <span class="number">8</span></span><br><span class="line">a=<span class="number">8</span>  b=<span class="number">13</span>   <span class="comment">#大于了10不做输出</span></span><br></pre></td></tr></table></figure></p><h2 id="剑9-变跳台阶"><a href="#剑9-变跳台阶" class="headerlink" title="剑9-变跳台阶"></a>剑9-变跳台阶</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><p>分析：<br>因为n级台阶，第一步有n种跳法：跳1级、跳2级、到跳n级<br>跳1级，剩下n-1级，则剩下跳法是f(n-1)<br>跳2级，剩下n-2级，则剩下跳法是f(n-2)<br>所以f(n)=f(n-1)+f(n-2)+…+f(1)<br>因为f(n-1)=f(n-2)+f(n-3)+…+f(1)<br>所以f(n)=2*f(n-1)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jumpFloor2</span><span class="params">(self, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> number &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">elif</span> number == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*self.jumpFloor2(number<span class="number">-1</span>)</span><br></pre></td></tr></table></figure><h2 id="剑10-矩形覆盖"><a href="#剑10-矩形覆盖" class="headerlink" title="剑10-矩形覆盖"></a>剑10-矩形覆盖</h2><p>我们可以用2<em>1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2</em>1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><p>分析：<br><img src="http://p3nyp7kdl.bkt.clouddn.com/b.png" alt=""></p><p>逆向分析<br>应为可以横着放或竖着放，多以f(n)可以是2<em>(n-1)的矩形加一个竖着放的2</em>1的矩形或2*(n-2)的矩形加2横着放的，即f(n)=f(n-1)+f(n-2)<br>当到了最后，f(1)=1,f(2)=2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">rectCover</span><span class="params">(self, number)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    <span class="keyword">elif</span> number &lt;= <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        a,b = <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,number)：</span><br><span class="line">        a,b = b,a+b</span><br><span class="line">    <span class="keyword">return</span> b</span><br></pre></td></tr></table></figure><h2 id="剑11-二进制中1的个数"><a href="#剑11-二进制中1的个数" class="headerlink" title="剑11-二进制中1的个数"></a>剑11-二进制中1的个数</h2><p>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><p>//超级简单容易理解                            //&amp;(与)<br>// 把这个数逐次 右移 然后和1 与,<br>//就得到最低位的情况,其他位都为0,<br>//如果最低位是0和1与 之后依旧 是0，如果是1，与之后还是1。<br>//对于32位的整数 这样移动32次 就记录了这个数二进制中1的个数了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">NumberOf1</span><span class="params">(self,n)</span>:</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line">        count += (n &gt;&gt; i)&amp;<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h2 id="剑12-数值整数次方"><a href="#剑12-数值整数次方" class="headerlink" title="剑12-数值整数次方"></a>剑12-数值整数次方</h2><p>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Power</span><span class="params">(self,base,exponent)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> base == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> base == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> exponent == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> exponent == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> base</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> pow(base,exponent)</span><br></pre></td></tr></table></figure><h2 id="剑13-调整数组顺序使奇数位于偶数前面"><a href="#剑13-调整数组顺序使奇数位于偶数前面" class="headerlink" title="剑13-调整数组顺序使奇数位于偶数前面"></a>剑13-调整数组顺序使奇数位于偶数前面</h2><p>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><ul><li>1.要想保证原有次序，则只能顺次移动或相邻交换。</li><li>2.i从左向右遍历，找到第一个偶数。</li><li>3.j从i+1开始向后找，直到找到第一个奇数。</li><li>4.将[i,…,j-1]的元素整体后移一位，最后将找到的奇数放入i位置，然后i++。</li><li>5.終止條件：j向後遍歷查找失敗。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reOrderArray</span><span class="params">(self,array)</span>:</span></span><br><span class="line">        odd = []</span><br><span class="line">        even = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> array:</span><br><span class="line">            <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">1</span>:</span><br><span class="line">                odd.append(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                even.append(i)</span><br><span class="line">        <span class="keyword">return</span> odd+even</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Fibonacci数列&quot;&gt;&lt;a href=&quot;#Fibonacci数列&quot; class=&quot;headerlink&quot; title=&quot;Fibonacci数列&quot;&gt;&lt;/a&gt;Fibonacci数列&lt;/h1&gt;&lt;h2 id=&quot;剑7-斐波那契数列&quot;&gt;&lt;a href=&quot;#剑7-斐波那契数
      
    
    </summary>
    
      <category term="剑指offer" scheme="http://berryk.top/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="查找" scheme="http://berryk.top/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="替换空格" scheme="http://berryk.top/tags/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    
      <category term="打印链表" scheme="http://berryk.top/tags/%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>算法（一）</title>
    <link href="http://berryk.top/archives/b04cb3d.html"/>
    <id>http://berryk.top/archives/b04cb3d.html</id>
    <published>2018-02-09T19:09:02.000Z</published>
    <updated>2018-02-15T05:38:26.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一题"><a href="#第一题" class="headerlink" title="第一题"></a>第一题</h1><ol><li>从1到500的500个数，第一次删除奇数位，第二次删除剩下来的奇数位，以此类推，最后剩下的唯一一位数是__</li></ol><p>分析思路：<br>比如：1,2，删除奇数位，那剩下的是2，<br>1,2,3，删除奇数位，剩下的是2，<br>1,2,3,4,剩下的是4,<br>1,2,3,4,5,6,7,剩下的是4,<br>1,2,3,4,5,6,7,8和1,2,3,4,5,6,7,8,9,10,11,12,13,14,15剩下的是8，<br>总结规律：当1~n，$2^i&lt;n&lt;2^(i+1)$时候，这样删除剩下的是$2^i$。<br>$2^8&lt;500&lt;2^9$，所以剩下的就是$2^8=256$。</p><h1 id="边缘算子"><a href="#边缘算子" class="headerlink" title="边缘算子"></a>边缘算子</h1><ol><li>常用边缘检测有哪些算子，有什么特性？</li></ol><p>Roberts，Sobel，Prewitt，Laplacian，Canny</p><p>(1)Robert</p><p>优点：一种利用局部差分算子寻找边缘的算子，定位比较精确，但由于不包括平滑，所以对于噪声比较敏感。</p><p>缺点：对噪声敏感,无法抑制噪声影响。</p><p>(2)Sobel</p><p>优点：一阶微分算子，加权平均滤波，对低噪声图像有较好检测效果。</p><p>缺点：抗噪性差。</p><p>(3)Prewitt</p><p>优点：一阶微分算子，平均滤波，对低噪声图像有较好检测效果。</p><p>缺点：抗噪性差。</p><p>(4)Laplacian算子</p><p>优点：各向同性，二阶微分，精确定位边缘位置所在。</p><p>缺点：无法感知边缘强度。只适用于无噪声图象。存在噪声情况下，使用Laplacian算子检测边缘之前需要先进行低通滤波。</p><p>(5)Canny算子</p><p>是一个具有滤波，增强，检测的多阶段的优化算子。先利用高斯平滑滤波器来平滑图像以除去噪声，采用一阶偏导的有限差分来计算梯度幅值和方向，然后再进行非极大值抑制。</p><h1 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h1><ol><li>C，C++程序编译的内存分配情况有哪几种，并简要解释。</li></ol><p>C，C++程序编译的内存分配情况共有以下五种：</p><p>(1)栈区（ stack ）:由编译器自动分配释放 ，存放为运行函数而分配的局部变量、函数参数、返回数据、返回地址等。其操作方式类似于数据结构中的栈。</p><p>(2)堆区（ heap ）:一般由程序员分配释放， 若程序员不释放，程序结束时可能由 OS 回收。分配方式类似于链表。</p><p>(3)全局区（静态区）（ static ）:存放全局变量、静态数据、常量。程序结束后有系统释放</p><p>(4)文字常量区: 常量字符串就是放在这里的。 程序结束后由系统释放。</p><p>(5)程序代码区:存放函数体（类成员函数和全局函数）的二进制代码。</p><h1 id="cnn和fcn"><a href="#cnn和fcn" class="headerlink" title="cnn和fcn"></a>cnn和fcn</h1><ol><li>简述CNN和FCN的区别</li></ol><p>卷积层是CNN区别于其它类型神经网络的本质特点</p><p>不过CNN通常也不仅仅只包含卷积层，其也会包含全连接层，全连接层的坏处就在于其会破坏图像的空间结构，因此人们便开始用卷积层来“替代”全连接层，通常采用1 × 1的卷积核，这种不包含全连接层的CNN称为全卷积网络（FCN）。</p><p>FCN最初是用于图像分割任务，之后开始在计算机视觉领域的各种问题上得到应用，事实上，Faster R-CNN中用来生成候选窗口的CNN就是一个FCN。    </p><h1 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h1><p>5（编程题）给出了一个n*n的矩形，编程求从左上角到右下角的路径数（n &gt; =2），并返回走的方法，限制只能向右或向下移动，不能回退。向右走此步骤标记为1， 向下走此步骤标记为2。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Int <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> b , <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; method)</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>算法分析：<br>这是一个动态规划问题。<br>因为限制只能向右或向下移动，所以当走到某一步时只有两种可能：<br>一是从该处的上面走过来的；<br>二是从该处的左边走过来的。<br>假设我们到达某一处（i,j）, <code>Path[i][j]</code>,可以得到<code>Path[i][j] = Path[i - 1][j] + Path[i][j - 1]</code>.<br>上述方程的边界条件出现在最左列（<code>P [i] [j-1]</code>不存在），最上一行（<code>P [i-1] [j]</code>不存在）。这些条件可以通过初始化（预处理）来处理 - 对于所有有效的i，j，初始化<code>P [0] [j] = 1，P [i] [0] = 1</code>。注意初始值是1而不是0。</p><p>不理解上面给的b和method，这里自己写了个solution：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; path(m, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; (n, <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">                path[i][j] = path[i - <span class="number">1</span>][j] + path[i][j - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> path[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>6.（编程题）编程求解<code>a＊x + b * sin x = 0</code>。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Std::<span class="built_in">vector</span>&lt;<span class="keyword">double</span>&gt; Solve(<span class="keyword">double</span> a, <span class="keyword">double</span> b)&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>依然不知都写的啥，用matlab求解：<br><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">syms a b x</span><br><span class="line">solve(a＊x + b * <span class="built_in">sin</span> x == <span class="number">0</span>) </span><br><span class="line">&gt;&gt;<span class="built_in">ans</span>.x</span><br></pre></td></tr></table></figure></p><p>7、 （探索题）你会用什么样的方法提取遥感图像中的道路呢（包括主街道、田埂、小路）。示例如下：白色明显道路是大路，深绿色田埂也属于需要提取的区域。<br> <img src="http://p3nyp7kdl.bkt.clouddn.com/123.png" alt="123"></p><p>（1） 对含中心线的城区主街道，采取基于模板匹配的半自动道路提取方法，可以实时准确的提取城区主干道路的中心线。以中心线上一点为中心建立对应模板窗，在沿道路前进方向寻找与之匹配的目标窗，将该目标窗中心作为下一个道路种子点，并以此生成新的模板窗，玄幻迭代即可得到一系列中心线上种子点，最后将其连成中心线。</p><p>（2） 对于田埂小路，采用基于像素匹配和基于比值直方图匹配的半自动提取算法，提取道路信息，当道路与周围环境对比度降低（周围大量的绿田），仍能保证较好结果。</p><p>8、 （随便聊聊题） 聊聊你认为深度学习中最有用的三个trick和三个创造性的idea，并说一下你的理解，为什么有用，为什么有创造性。</p><p>一．有用的三个trick</p><p>（1）loss function: 用于衡量最优的策略。一般由一个损失项和一个正则化项组成。常见的损失函数有：0-1损失函数和绝对值损失函数，log对数损失函数，平方损失函数，指数损失函数 ，Hinge损失函数。 </p><p>（2）kernel: 核函数是machine learning中最核心的部分的东西, 它有效的描述了点和点之间的关系，或者说是距离，当然这里的距离严格的说应该是广义的距离。当然核函数一般与曼哈顿距离，欧氏距离等以及空间（希尔伯特空间等）关联。</p><p>（3）activation function：激活函数不是真的要去激活什么。在神经网络中，激活函数的作用是能够给神经网络加入一些非线性因素，使得神经网络可以更好地解决较为复杂的问题。常用的三类激活函数有：</p><p>A．Sigmoid函数的输出映射在(0,1)(0,1)之间，单调连续，输出范围有限，优化稳定，可以用作输出层。</p><p>B．tanh函数比Sigmoid函数收敛速度更快</p><p>C．ReLU比起Sigmoid和tanh能够快速收敛；Sigmoid和tanh涉及了很多很expensive的操作（比如指数），ReLU可以更加简单的实现；有效缓解了梯度消失的问题；在没有无监督预训练的时候也能有较好的表现；提供了神经网络的稀疏表达能力。</p><p>二．三个创造性的idea</p><p>（1）GAN: 生成对抗神经网络。GAN已经被引入到了各种以往深度神经网络的任务中,例如从分割图像恢复原图像，给黑白图片上色，还可以做图像超分辨率,动态场景生成，图像去模糊等等。</p><p>（2）开源框架tensorflow: 不仅实现深度学习的可视化，实现了将深度学习算法移植到智能设备或手机应用中去。</p><p>（3）人脸识别，目标定位等一系列深度学习技术的成熟使人工智能走向工业智能。小米扫地机器人，物流运载机等等都可以算是深度学习的创造性成果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一题&quot;&gt;&lt;a href=&quot;#第一题&quot; class=&quot;headerlink&quot; title=&quot;第一题&quot;&gt;&lt;/a&gt;第一题&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;从1到500的500个数，第一次删除奇数位，第二次删除剩下来的奇数位，以此类推，最后剩下的唯一一位数是__&lt;/li&gt;
&lt;
      
    
    </summary>
    
      <category term="算法工程师面试" scheme="http://berryk.top/categories/%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="算法面试" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95/"/>
    
      <category term="深度学习面试" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
    
      <category term="机器学习面试" scheme="http://berryk.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法：正则化</title>
    <link href="http://berryk.top/archives/ca0f6c63.html"/>
    <id>http://berryk.top/archives/ca0f6c63.html</id>
    <published>2018-02-09T16:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>正则化常和防止过拟合联系在一起，什么是过拟合，为什么会引起过拟合，怎么解决？<br>过拟合产生的原因：模型过于复杂，参数太多<br>什么是过拟合：模型训练时误差小，测试时误差大；也就是模型复杂到可以拟合我们所有的训练样本，但是在实际预测新样本的时候却一塌糊涂</p><p>简而言之，就是擅长背诵知识，不善于灵活应用；应试能力好，实际应用能力差。</p><p>通常过拟合由以下三种原因产生：</p><ol><li>假设过于复杂；</li><li>数据存在很多噪音；</li><li>数据规模太小。 </li></ol><p>过拟合的解决方法通常有：</p><ol><li>early stopping；</li><li>数据集扩增；</li><li>正则化；</li><li>Dropout。<h1 id="L0与L1-正则项（LASSO-regularizer）"><a href="#L0与L1-正则项（LASSO-regularizer）" class="headerlink" title="L0与L1-正则项（LASSO regularizer）"></a>L0与L1-正则项（LASSO regularizer）</h1>在机器学习里，最简单的学习算法可能是所谓的线性回归模型</li></ol><p><img src="$E]DG90Z.png" alt="](http://p3nyp7kdl.bkt.clouddn.com/TJ{1WIHG8`9YY"></p><p>我们考虑这样一种普遍的情况，即：预测目标背后的真是规律，可能只和某几个维度的特征有关；而其它维度的特征，要不然作用非常小，要不然纯粹是噪声。在这种情况下，除了这几个维度的特征对应的参数之外，其它维度的参数应该为零。若不然，则当其它维度的特征存在噪音时，模型的行为会发生预期之外的变化，导致过拟合。</p><p>于是，我们得到了避免过拟合的第一个思路：使尽可能多的参数为零。为此，最直观地我们可以引入$L_0$-范数。令：</p><p><img src="http://p3nyp7kdl.bkt.clouddn.com/YJPZ6]4QI]IS1LSCF}8F(RT.png" alt=""></p><p>这意味着，我们希望绝大多数w⃗ 的分量为零。</p><p>通过引入 L0−正则项，我们实际上引入了一种「惩罚」机制，即：若要增加模型复杂度以加强模型的表达能力降低损失函数，则每次使得一个参数非零，则引入 ℓ0的惩罚系数。也就是说，如果使得一个参数非零得到的收益（损失函数上的收益）不足 ℓ0；那么增加这样的复杂度是得不偿失的。</p><p>通过引入L0−正则项，我们可以使模型稀疏化且易于解释，并且在某种意义上实现了「特征选择」。这看起来很美好，但是 L0−正则项也有绕不过去坎：</p><ol><li>不连续</li><li>非凸</li><li>不可求导</li></ol><p>因此，L0正则项虽好，但是求解这样的最优化问题，难以在多项式时间内找到有效解（NP-Hard 问题）。于是，我们转而考虑 L0-范数最紧的凸放松（tightest convex relaxation）：L1-范数。令：<br><img src="http://p3nyp7kdl.bkt.clouddn.com/a.png" alt=""></p><h1 id="L2正则项（Ridge-regularizer）"><a href="#L2正则项（Ridge-regularizer）" class="headerlink" title="L2正则项（Ridge regularizer）"></a>L2正则项（Ridge regularizer）</h1><p>让我们回过头，考虑多项式模型，它的一般形式为：<br><img src="http://p3nyp7kdl.bkt.clouddn.com/NHQJX9PCQA21REG`W~IQ`I1.png" alt=""></p><p>我们注意到，当多项式模型过拟合时，函数曲线倾向于靠近噪声点。</p><p>这意味着，函数曲线会在噪声点之间来回扭曲跳跃。</p><p>这也就是说，在某些局部，函数曲线的切线斜率会非常高（函数导数的绝对值非常大）。</p><p>对于多项式模型来说，函数导数的绝对值，实际上就是多项式系数的一个线性加和。</p><p>这也就是说，过拟合的多项式模型，它的参数的绝对值会非常大（至少某几个参数分量的绝对值非常大）。</p><p>因此，如果我们有办法使得这些参数的值，比较稠密均匀地集中在0附近，就能有效地避免过拟合。</p><p>于是我们引入L2−正则项，令<br><img src="http://p3nyp7kdl.bkt.clouddn.com/WC@2B]NI1I72KSK[~50VM_S.png" alt=""></p><h1 id="L1−正则项与L2−正则项的区别"><a href="#L1−正则项与L2−正则项的区别" class="headerlink" title="L1−正则项与L2−正则项的区别"></a>L1−正则项与L2−正则项的区别</h1><p>现在，我们考虑这样一个问题：为什么使用L1−正则项，会倾向于使得参数稀疏化；而使用L2−正则项，会倾向于使得参数稠密地接近于0？</p><p>这里引用一张来自周志华老师的著作，《机器学习》（西瓜书）里的插图，尝试解释这个问题。</p><p><img src="http://omu7tit09.bkt.clouddn.com/15008845171281.png" alt=""></p><p>为了简便起见，我们只考虑模型有两个参数w1和w2的情形。</p><p>在图中，我们有三组等值线，位于同一条等值线上的w1与w2映射到相同的平方损失项、L1−范数和L2−范数。并且，对于三组等值线来说，当(w1,w2)(w1,w2)沿着等值线法线方向，向外扩张，则对应的值增大；反之，若沿着法线向内收缩，则对应的值减小。</p><p>因此，对于目标函数Obj(F)来说，实际上是要在正则项的等值线与损失函数的等值线中寻找一个交点，使得二者的和最小。</p><p>对于L1−正则项来说，因为L1−正则项是一组菱形，这些交点容易落在坐标轴上。因此，另一个参数的值在这个交点上就是0，从而实现了稀疏化。</p><p>对于 L2−正则项来说，因为 L2−正则项的等值线是一组圆形。所以，这些交点可能落在整个平面的任意位置。所以它不能实现「稀疏化」。但是，另一方面，由于 (w1,w2)(w1,w2) 落在圆上，所以它们的值会比较接近。这就是为什么 L2−正则项可以使得参数在零附近稠密而平滑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;正则化常和防止过拟合联系在一起，什么是过拟合，为什么会引起过拟合，怎么解决？&lt;br&gt;过拟合产生的原因：模型过于复杂，参数太多&lt;br&gt;什么是过
      
    
    </summary>
    
      <category term="机器学习" scheme="http://berryk.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer（三）：1-6</title>
    <link href="http://berryk.top/archives/2853aed2.html"/>
    <id>http://berryk.top/archives/2853aed2.html</id>
    <published>2018-02-08T12:09:02.000Z</published>
    <updated>2018-02-15T05:38:26.121Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h1><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>//思路<br>//1：从前往后插入，这样移动·的次数多不建议<br>//2：从后往前插</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line"><span class="comment">#array 2D-array</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(self, target, array)</span>:</span></span><br><span class="line">        <span class="comment"># search in row</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">            <span class="comment"># search in column</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array[i])):</span><br><span class="line">                <span class="comment"># find target</span></span><br><span class="line">                <span class="keyword">if</span> target == array[i][j]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'true'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'false'</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">    S=Solution()</span><br><span class="line">    target, array=input()</span><br><span class="line">    print(S.Find(target,array))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>以下这个是另外一种写法，也能够成功运行，但是这两种普遍蛮力<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(self, target, array)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(array)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(array[i])):</span><br><span class="line">                <span class="keyword">if</span> target == array[i][j]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">'true'</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'false'</span></span><br><span class="line"></span><br><span class="line">flag = <span class="keyword">True</span></span><br><span class="line"><span class="keyword">while</span> flag:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        S=Solution()</span><br><span class="line">        target = <span class="number">1</span></span><br><span class="line">        array = [[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">        print(S.Find(target,array))</span><br><span class="line">        flag = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p>算法思想：</p><ol><li>由于数组从左到右，从上到下都是递增，可以从右上角或者左下角开始查找，这里从右上角开始查找</li><li>定义数组array，行i，列j，目标target。</li><li>若<code>array[i][j]</code>==target,那恭喜你找到目标；</li><li>若<code>array[i][j]</code>&gt;target,那向左去找目标–j；</li><li>否则，<code>array[i][j]</code>小于target,那向下寻找目标++i；</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">Find</span><span class="params">(self, target, array)</span>:</span></span><br><span class="line">        rows = len(array)<span class="number">-1</span></span><br><span class="line">        cols = len(array[i])<span class="number">-1</span></span><br><span class="line">        i = rows</span><br><span class="line">        j = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> j &lt;= cols <span class="keyword">and</span> i &gt;= <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> target &lt; array[i][j]:</span><br><span class="line">                i -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> target &gt; array[i][j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy</p><p>以下仍然是从前向后<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># s 源字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> s.replace(<span class="string">' '</span>, <span class="string">'%20'</span>)</span><br><span class="line"></span><br><span class="line">算法思想：</span><br><span class="line"><span class="number">1.</span> 定义字符串下标i（i=<span class="number">0</span>开始），定义空格bankNum,遍历字符串并计算空格个数；</span><br><span class="line"><span class="number">2.</span> 总字符串=原始字符串下标+<span class="number">1</span>+<span class="number">2</span>*bankNum；</span><br><span class="line"><span class="number">3.</span> 末尾字符串下标=totalNum<span class="number">-1</span>，也就是我们说的放置位置；</span><br><span class="line"><span class="number">4.</span> 总体来说：从后向前遍历字符串，如果遇到空格，就加%<span class="number">20</span>；没有空格，就将原字符串的最后一个字符赋给新字符串</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="comment"># s 源字符串</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">replaceSpace</span><span class="params">(self, s)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        str = []</span><br><span class="line">        num = s.count(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> char == <span class="string">' '</span> <span class="keyword">and</span> num &gt; <span class="number">0</span>:</span><br><span class="line">                char = <span class="string">'%20'</span></span><br><span class="line">                num -= <span class="number">1</span></span><br><span class="line">            str.append(char)</span><br><span class="line"> </span><br><span class="line">        newstr = <span class="string">''</span>.join(str)</span><br><span class="line">        <span class="keyword">return</span> newstr</span><br><span class="line">添加笔记</span><br></pre></td></tr></table></figure></p><h1 id="打印链表"><a href="#打印链表" class="headerlink" title="打印链表"></a>打印链表</h1><p>输入一个链表，从尾到头打印链表每个节点的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self,listNode)</span>:</span></span><br><span class="line">        l=[]</span><br><span class="line">        head = listNode</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            l.insert(<span class="number">0</span>,head.val)</span><br><span class="line">            head=head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search2</span><span class="params">(a,m)</span>:</span></span><br><span class="line">    low=<span class="number">0</span></span><br><span class="line">    high=len(a)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high):</span><br><span class="line">        mid=(low+high)/<span class="number">2</span></span><br><span class="line">        midval=a[mid]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> midval&lt;m:</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> midval&gt;m:</span><br><span class="line">            high=mid<span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__==<span class="string">"__main__"</span></span><br><span class="line">       a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">       m=<span class="number">5</span></span><br><span class="line">       result=search2(a,m)</span><br><span class="line">       <span class="keyword">print</span> result</span><br></pre></td></tr></table></figure><p>下面这个程序就会陷入无限循环while中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;studio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left, middle, right;</span><br><span class="line">    left=<span class="number">0</span>, right=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">    &#123;</span><br><span class="line">        middle=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[middle]&gt;v)</span><br><span class="line">        &#123;</span><br><span class="line">        right=middle</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[middle]&lt;v)</span><br><span class="line">        &#123;</span><br><span class="line">        left=middle</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> middle;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下是正确写法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span> &amp;&amp; x&gt;=a[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> middle=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;a[middle])</span><br><span class="line">            right=middle<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            left=middle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==a[left])</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h1><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val = x</span><br><span class="line">#         self.left = None</span><br><span class="line">#         self.right = None</span><br><span class="line">class Solution:</span><br><span class="line">    # 返回构造的TreeNode根节点</span><br><span class="line">    def reConstructBinaryTree(self, pre, tin):</span><br><span class="line">        # write code here</span><br><span class="line">        if len(pre) == 0:</span><br><span class="line">            return None</span><br><span class="line">        root = TreeNode(pre[0])</span><br><span class="line">        pos = tin.index(pre[0])</span><br><span class="line">        root.left = self.reConstructBinaryTree( pre[1:1+pos], tin[:pos])</span><br><span class="line">        root.right = self.reConstructBinaryTree( pre[pos+1:], tin[pos+1:])</span><br><span class="line">        return root</span><br></pre></td></tr></table></figure></p><h1 id="用两个栈实现队列"><a href="#用两个栈实现队列" class="headerlink" title="用两个栈实现队列"></a>用两个栈实现队列</h1><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stack1=[]</span><br><span class="line">        self.stack2=[]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self,none)</span>:</span></span><br><span class="line">        self.stack1.append(node)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.stack2==[]:</span><br><span class="line">            <span class="keyword">while</span> self.stack1:</span><br><span class="line">                self.stack2.append(self.stack1.pop())</span><br><span class="line">            <span class="keyword">return</span> self.stack2.pop()</span><br><span class="line">        <span class="keyword">return</span> self.stack2.pop()</span><br></pre></td></tr></table></figure></p><h1 id="旋转数组中的最小数字"><a href="#旋转数组中的最小数字" class="headerlink" title="旋转数组中的最小数字"></a>旋转数组中的最小数字</h1><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        pre = <span class="number">-7e20</span></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> rotateArray:</span><br><span class="line">            <span class="keyword">if</span> num &lt; pre :</span><br><span class="line">                <span class="keyword">return</span> num</span><br><span class="line">            pre = num</span><br><span class="line">             </span><br><span class="line">        <span class="keyword">if</span> len(rotateArray) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> rotateArray[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二维数组中的查找&quot;&gt;&lt;a href=&quot;#二维数组中的查找&quot; class=&quot;headerlink&quot; title=&quot;二维数组中的查找&quot;&gt;&lt;/a&gt;二维数组中的查找&lt;/h1&gt;&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请
      
    
    </summary>
    
      <category term="剑指offer" scheme="http://berryk.top/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="查找" scheme="http://berryk.top/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="替换空格" scheme="http://berryk.top/tags/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    
      <category term="打印链表" scheme="http://berryk.top/tags/%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>算法（三）</title>
    <link href="http://berryk.top/archives/760c84b7.html"/>
    <id>http://berryk.top/archives/760c84b7.html</id>
    <published>2018-02-05T18:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.155Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h1><ol><li>小王在用svm做一个垃圾邮件分类器，如果一个邮件为垃圾邮件，则y=1，否则y=0。<br>（1）小王应该一区那些特征？（10分）<br>（2）在小王的训练集中，有99%都是非垃圾邮件，1%是垃圾邮件，如果最后训练的模型为对所有的邮件，都判定为非垃圾邮件，请问在训练集合中，准确率为多少？召回率为多少？（10分）<br> (3)如果在应用场景中，希望能尽可能的召回垃圾邮件，怎么办？（10分）</li></ol><h1 id="算法与程序设计"><a href="#算法与程序设计" class="headerlink" title="算法与程序设计"></a>算法与程序设计</h1><ol><li><p>给定一个长度为N的整数数组（元素有正有负），求所有元素之和最大的一个子数组，分析算法时间复杂度。（10）</p></li><li><p>百度每天接受用户的搜索查询，总是不停有搜索query进入日志，把query看作一个字符串，搜索日志就是一个字符串的数据流。这个字符串流永不停止。如何在这个不断增加的字符串流序列中，随机选择1个字符串？如果随机选择1000个字符串呢？（15）</p></li><li><p>在一个无限大平面上，有两组平行线，互相间垂直，每组平行线的间隔都为t，将一根长度为1（1小于t）的针任意掷在这个平面上，求此针与所有平行线都不想交的概率，采用蒙特卡洛方法，模拟计算这个概率值。（15）</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简答题&quot;&gt;&lt;a href=&quot;#简答题&quot; class=&quot;headerlink&quot; title=&quot;简答题&quot;&gt;&lt;/a&gt;简答题&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;小王在用svm做一个垃圾邮件分类器，如果一个邮件为垃圾邮件，则y=1，否则y=0。&lt;br&gt;（1）小王应该一区那些特征？（
      
    
    </summary>
    
      <category term="算法工程师面试" scheme="http://berryk.top/categories/%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="算法面试" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95/"/>
    
      <category term="深度学习面试" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
    
      <category term="机器学习面试" scheme="http://berryk.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>算法（二）</title>
    <link href="http://berryk.top/archives/3b1227e5.html"/>
    <id>http://berryk.top/archives/3b1227e5.html</id>
    <published>2018-02-04T22:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.139Z</updated>
    
    <content type="html"><![CDATA[<p>#1. 基础算法题<br>有序的数组，其中一个数出现一次，其中的数出现两次，找到这个出现一次的数？<br>答：很自然想到hashmap或者异或的做法，时间复杂度O（N）。回答的时候觉得有坑，因为有序的条件没用，心想肯定跟二分有关系，果然面试官要求降低复杂度。没思考出来二分的策略，后来在面试官的提醒下明白了，二分的时候跟数组的位置联系起来，既数组肯定是基数个，二分的时候如果mid不成立的话，要找的值一定落在跟左右两边相等元素的那一侧，时间复杂度O（logN）</p><p>#2.介绍项目<br>聊天式文本挖掘，主要介绍了针对短文本的特征所做的特征工程</p><p>2.1.讲下LR模型<br>答：在线性回归的基础上加了sigmoid函数，所有变成了分类模型，输出可以表示概率。采用似然估计构造目标函数，目标是优化最大似然估计，公式H(x)=-(ylogf(x)+(1-y)log(1-f(x)),一般优化方法采用的是梯度下降法。</p><p>2.2.LR模型为什么采用似然估计损失函数<br>答：因为最小二乘法是假设残差服从正太分布的，而LR在sigmoid 作用后就不会服从正态分布了，所以采用的是最大似然估计。</p><p>后思考：1.最小二乘法反映的是线性空间上的线性投影的最短距离，在非线性空间上表现不如MLE。（MLE可以看作一种特殊情况下的Bayesian 估计，具体来说，就是在prior 是 diffuse （无知的）情况下，让posterior 分布取得极大值的系数值）</p><p>2.如果采用均方差最损失函数的时候，梯度下降求偏导时会有一项导数项，这样会导致梯度在一定阶段会收敛的特别慢，而对数损失函数log正好能和sigmoid的exp抵消掉，会加快收敛速度。</p><p>2.3.说下基本主题的LDA模型<br>答：生成式模型，</p><p>思想：文档一定概率上从属于某些个主题，主题一定概率上会选中某些相关的词，这样就构造了文档到主题到词的联系，同时可以解决同义词问题，因为同义词可能属于不同主题。算法流程回答的模糊，感觉面试官不太满意。</p><p>2.4.说下项目用到的doc2vec怎么产生的？<br>答：介绍了下word2vec的思想，然后讲传统上通常词向量简单的加权求和来表征一篇文档，而doc2vec训练方式是在word2vec的基础上，加入了段落ID，进行了一层训练，这样好处是保留了词的上下文信息。（ps：解释的不清楚，自己不太满意） </p><p>2.5.说下论文中频繁序列挖掘prefixspan 算法？<br>答：（ps：因为这个算法不做序列挖掘基本不知道，可能只了解apriori算法）对比apriori算法的过程和缺点，讲解该算法的优势，只需要扫描一次序列数据集，目标是挖掘出满足最小支持度的频繁序列，长度为1的前缀开始挖掘序列模式，搜索对应的投影数据库的频繁序列，然后递归的挖掘长度为2的前缀所对应的频繁序列。以此类推，一直递归到对应的投影数据库为空或者对应投影数据库中各项的支持度计数小于阈值为止。整个过程就是前缀不断的增长，产生1，2…N 频繁序列，对应的投影数据库不断缩小直至为空。</p><p>优点：PrefixSpan算法由于不用产生候选序列，且投影数据库缩小的很快，内存消耗比较稳定，作频繁序列模式挖掘的时候效果很高。</p><p>3.了解深度学习吗？能否讲下CNN的特点？<br>答：神经网络模型前向传递，反向调节的特点（BP网络）,隐含层我觉得是一个特征做变换的过程，整个过程给人的感觉就是向前是特征拓展阶段，向后是参数调优阶段。</p><p>回到CNN，特点是局部感受和权值共享，通过卷积核扫描原始数据能够学习到不同的局部的特征，接着通过池化进一步提取特征，这些做的能够让参数数目有量级的减少，同时权值共享是同一层隐含层共享权值，这样也是减少了隐含层的参数，很多卷积核学习的到特征最后传递到下一层网络，到最后一层采用分类器分类（扯不下去了，开始瞎扯）。</p><p>深度学习解决了以往神经网络深度网络很多问题，梯度消失爆炸问题，几个方面：</p><p>一是激活函数不光是只用sigmoid函数，还有 ReLU函数 </p><p>二是在参数并不是初始化的时候并不是随机选择的，而是在前面有自编码器做了特征特征器，这样避免了梯度下降法求解陷入局部最优解；</p><p>三，深度学习一些手段，权值共享，卷积核，pooling等都能抑制梯度消失问题；</p><p>四，二次代价函数换成交叉熵损失函数或者选用softmax+对数似然代价函数的组合。<br>4.说说RBM编码器<br>答：）一种特征探测器，每一层学习的特征向上传递，然后反过来微调。好吧，只能回答这么多了。</p><p>补充：RBM包括隐层，可见层和偏置层。可见层和隐含层可以双向传播。标准的RBM，隐含层和可见层都是二进制表示，既激活函数的激活值服从二项分布。每一层的节点没有链接，如果假设所有的节点都只能取0或者1，同时全概率分布p(v,h)满足伯努利分布。</p><p>几个参数：<br>一可视层和隐含层的权重矩阵</p><p>二是可是节点的偏移量</p><p>三是隐层的偏移量。这几个参数决定将N维的样本编码M维的样本。</p><p>用途：<br>1.降维，类似稀疏自动编码器<br>2.用RBM训练得到的权重举证和偏移量作为BP神经网路的初始值，避免陷入局部极小值<br>3.可以估计联合分布P(v,h)，进而求出p（h|v）。生成式模型<br>4.直接计算p（h|v）进行分类。判别式模型</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#1. 基础算法题&lt;br&gt;有序的数组，其中一个数出现一次，其中的数出现两次，找到这个出现一次的数？&lt;br&gt;答：很自然想到hashmap或者异或的做法，时间复杂度O（N）。回答的时候觉得有坑，因为有序的条件没用，心想肯定跟二分有关系，果然面试官要求降低复杂度。没思考出来二分的
      
    
    </summary>
    
      <category term="算法工程师面试" scheme="http://berryk.top/categories/%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="算法面试" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95/"/>
    
      <category term="深度学习面试" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
    
      <category term="机器学习面试" scheme="http://berryk.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>别人的算法题</title>
    <link href="http://berryk.top/archives/9c49b8cc.html"/>
    <id>http://berryk.top/archives/9c49b8cc.html</id>
    <published>2018-02-04T22:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.170Z</updated>
    
    <content type="html"><![CDATA[<p>#1. 基础算法题<br>有序的数组，其中一个数出现一次，其中的数出现两次，找到这个出现一次的数？<br>答：很自然想到hashmap或者异或的做法，时间复杂度O（N）。回答的时候觉得有坑，因为有序的条件没用，心想肯定跟二分有关系，果然面试官要求降低复杂度。没思考出来二分的策略，后来在面试官的提醒下明白了，二分的时候跟数组的位置联系起来，既数组肯定是基数个，二分的时候如果mid不成立的话，要找的值一定落在跟左右两边相等元素的那一侧，时间复杂度O（logN）</p><p>#2.介绍项目<br>聊天式文本挖掘，主要介绍了针对短文本的特征所做的特征工程</p><p>2.1.讲下LR模型<br>答：在线性回归的基础上加了sigmoid函数，所有变成了分类模型，输出可以表示概率。采用似然估计构造目标函数，目标是优化最大似然估计，公式H(x)=-(ylogf(x)+(1-y)log(1-f(x)),一般优化方法采用的是梯度下降法。</p><p>2.2.LR模型为什么采用似然估计损失函数<br>答：因为最小二乘法是假设残差服从正太分布的，而LR在sigmoid 作用后就不会服从正态分布了，所以采用的是最大似然估计。</p><p>后思考：1.最小二乘法反映的是线性空间上的线性投影的最短距离，在非线性空间上表现不如MLE。（MLE可以看作一种特殊情况下的Bayesian 估计，具体来说，就是在prior 是 diffuse （无知的）情况下，让posterior 分布取得极大值的系数值）</p><p>2.如果采用均方差最损失函数的时候，梯度下降求偏导时会有一项导数项，这样会导致梯度在一定阶段会收敛的特别慢，而对数损失函数log正好能和sigmoid的exp抵消掉，会加快收敛速度。</p><p>2.3.说下基本主题的LDA模型<br>答：生成式模型，</p><p>思想：文档一定概率上从属于某些个主题，主题一定概率上会选中某些相关的词，这样就构造了文档到主题到词的联系，同时可以解决同义词问题，因为同义词可能属于不同主题。算法流程回答的模糊，感觉面试官不太满意。</p><p>2.4.说下项目用到的doc2vec怎么产生的？<br>答：介绍了下word2vec的思想，然后讲传统上通常词向量简单的加权求和来表征一篇文档，而doc2vec训练方式是在word2vec的基础上，加入了段落ID，进行了一层训练，这样好处是保留了词的上下文信息。（ps：解释的不清楚，自己不太满意） </p><p>2.5.说下论文中频繁序列挖掘prefixspan 算法？<br>答：（ps：因为这个算法不做序列挖掘基本不知道，可能只了解apriori算法）对比apriori算法的过程和缺点，讲解该算法的优势，只需要扫描一次序列数据集，目标是挖掘出满足最小支持度的频繁序列，长度为1的前缀开始挖掘序列模式，搜索对应的投影数据库的频繁序列，然后递归的挖掘长度为2的前缀所对应的频繁序列。以此类推，一直递归到对应的投影数据库为空或者对应投影数据库中各项的支持度计数小于阈值为止。整个过程就是前缀不断的增长，产生1，2…N 频繁序列，对应的投影数据库不断缩小直至为空。</p><p>优点：PrefixSpan算法由于不用产生候选序列，且投影数据库缩小的很快，内存消耗比较稳定，作频繁序列模式挖掘的时候效果很高。</p><p>3.了解深度学习吗？能否讲下CNN的特点？<br>答：神经网络模型前向传递，反向调节的特点（BP网络）,隐含层我觉得是一个特征做变换的过程，整个过程给人的感觉就是向前是特征拓展阶段，向后是参数调优阶段。</p><p>回到CNN，特点是局部感受和权值共享，通过卷积核扫描原始数据能够学习到不同的局部的特征，接着通过池化进一步提取特征，这些做的能够让参数数目有量级的减少，同时权值共享是同一层隐含层共享权值，这样也是减少了隐含层的参数，很多卷积核学习的到特征最后传递到下一层网络，到最后一层采用分类器分类（扯不下去了，开始瞎扯）。</p><p>深度学习解决了以往神经网络深度网络很多问题，梯度消失爆炸问题，几个方面：</p><p>一是激活函数不光是只用sigmoid函数，还有 ReLU函数 </p><p>二是在参数并不是初始化的时候并不是随机选择的，而是在前面有自编码器做了特征特征器，这样避免了梯度下降法求解陷入局部最优解；</p><p>三，深度学习一些手段，权值共享，卷积核，pooling等都能抑制梯度消失问题；</p><p>四，二次代价函数换成交叉熵损失函数或者选用softmax+对数似然代价函数的组合。<br>4.说说RBM编码器<br>答：）一种特征探测器，每一层学习的特征向上传递，然后反过来微调。好吧，只能回答这么多了。</p><p>补充：RBM包括隐层，可见层和偏置层。可见层和隐含层可以双向传播。标准的RBM，隐含层和可见层都是二进制表示，既激活函数的激活值服从二项分布。每一层的节点没有链接，如果假设所有的节点都只能取0或者1，同时全概率分布p(v,h)满足伯努利分布。</p><p>几个参数：<br>一可视层和隐含层的权重矩阵</p><p>二是可是节点的偏移量</p><p>三是隐层的偏移量。这几个参数决定将N维的样本编码M维的样本。</p><p>用途：<br>1.降维，类似稀疏自动编码器<br>2.用RBM训练得到的权重举证和偏移量作为BP神经网路的初始值，避免陷入局部极小值<br>3.可以估计联合分布P(v,h)，进而求出p（h|v）。生成式模型<br>4.直接计算p（h|v）进行分类。判别式模型</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#1. 基础算法题&lt;br&gt;有序的数组，其中一个数出现一次，其中的数出现两次，找到这个出现一次的数？&lt;br&gt;答：很自然想到hashmap或者异或的做法，时间复杂度O（N）。回答的时候觉得有坑，因为有序的条件没用，心想肯定跟二分有关系，果然面试官要求降低复杂度。没思考出来二分的
      
    
    </summary>
    
      <category term="算法工程师面试" scheme="http://berryk.top/categories/%E7%AE%97%E6%B3%95%E5%B7%A5%E7%A8%8B%E5%B8%88%E9%9D%A2%E8%AF%95/"/>
    
    
      <category term="算法面试" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95%E9%9D%A2%E8%AF%95/"/>
    
      <category term="深度学习面试" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
    
      <category term="机器学习面试" scheme="http://berryk.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>机器学习算法学习（六）：SVM</title>
    <link href="http://berryk.top/archives/df094319.html"/>
    <id>http://berryk.top/archives/df094319.html</id>
    <published>2018-02-03T18:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.139Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://p3nyp7kdl.bkt.clouddn.com/wallpaper-photo-1508367125578-6246f83905f7.jpg" alt="wallpaper-photo-1508367125578-6246f83905f7"><br>适用于初学SVM<br><a id="more"></a></p><h1 id="了解SVM"><a href="#了解SVM" class="headerlink" title="了解SVM"></a>了解SVM</h1><p>支持向量机，因其英文名为support vector machine，故一般简称SVM，通俗来讲，它是一种二类分类模型，其基本模型定义为特征空间上的间隔最大的线性分类器，其学习策略便是间隔最大化，最终可转化为一个凸二次规划问题的求解。</p><h2 id="1-分类标准的起源：Logistic回归"><a href="#1-分类标准的起源：Logistic回归" class="headerlink" title="1. 分类标准的起源：Logistic回归"></a>1. 分类标准的起源：Logistic回归</h2><p>理解SVM，咱们必须先弄清楚一个概念：线性分类器。</p><p>给定一些数据点，它们分别属于两个不同的类，现在要找到一个线性分类器把这些数据分成两类。如果用x表示数据点，用y表示类别（y可以取1或者-1，分别代表两个不同的类），一个线性分类器的学习目标便是要在n维的数据空间中找到一个超平面（hyperplane），这个超平面的方程可以表示为（ wT中的T代表转置）<br>$$w^Tx+ b = 0$$<br>可能有读者对类别取1或-1有疑问，事实上，这个1或-1的分类标准起源于logistic回归。<br>$$h_\theta (x) = g(\theta^Tx) = \frac{1}{1+e^-\theta^Tx} $$</p><p>其中x是n维特征向量，函数g就是logistic函数。</p><p>$$g(z) = \frac{1}{1+e^-z}$$的图像是：</p><p><img src="http://img.my.csdn.net/uploads/201304/05/1365174236_6175.png" alt=""></p><p>可以看到，上图将无穷映射到了(0,1)。</p><p>假设函数就是特征属于y=1的概率。<br>$$P(y=1|x; \theta) = h<em>\theta(x)$$<br>$$P(y=0|x; \theta) = 1-h</em>\theta(x)$$</p><p>从而，当我们要判别一个新来的特征属于哪个类时，只需求即可，若大于0.5就是y=1的类，反之属于y=0类。</p><p>此外，$h<em>\theta(x)$只和$\theta^Tx$有关，$\theta^Tx&gt;0$，那么$h</em>\theta(x)&gt;0.5$，而g(z)只是用来映射，真实的类别决定权还是在于$\theta^Tx$。再者，当$\theta^Tx&gt;&gt;0$时，$h<em>\theta(x)=1$，反之$h</em>\theta(x)=0$。如果我们只从$\theta^Tx$出发，希望模型达到的目标就是让训练数据中y=1的特征t$\theta^Tx&gt;&gt;0$，而是y=0的特征。Logistic回归就是要学习得到$\theta$，使得正例的特征远大于0，负例的特征远小于0，而且要在全部训练实例上达到这个目标。</p><p>接下来，尝试把logistic回归做个变形。首先，将使用的结果标签y = 0和y = 1替换为y = -1,y = 1，然后将$\theta^Tx=\theta_0+\theta_1x_1+\theta_2x_2+…+\theta_nx_n(x_0=1)$中的$\theta_0$替换为b，最后将后面的$\theta_0+\theta_1x_1+\theta_2x_2+…+\theta_nx_n$替换为$\theta_0+\theta_1x_1+\theta_2x_2+…+\theta_nx<em>n$（即$w^Tx$）。如此，则有了$\theta^Tx=w^Tx+ b$。也就是说除了y由y=0变为y=-1外，线性分类函数跟logistic回归的形式化表示$h</em>\theta (x) = g(\theta^Tx) =g(w^Tx+b)$没区别。</p><p>进一步，可以将假设函数中的g(z)做一个简化，将其简单映射到y=-1和y=1上。映射关系如下：<br><img src="http://img.my.csdn.net/uploads/201304/05/1365175998_9759.png" alt=""></p><h2 id="2-线性分类的一个例子"><a href="#2-线性分类的一个例子" class="headerlink" title="2. 线性分类的一个例子"></a>2. 线性分类的一个例子</h2><p>下面举个简单的例子。如下图所示，现在有一个二维平面，平面上有两种不同的数据，分别用圈和叉表示。由于这些数据是线性可分的，所以可以用一条直线将这两类数据分开，这条直线就相当于一个超平面，超平面一边的数据点所对应的y全是-1 ，另一边所对应的y全是1。<br><img src="http://img.blog.csdn.net/20140829134124453" alt=""></p><p>这个超平面可以用分类函数表示，当f(x) 等于0的时候，x便是位于超平面上的点，而f(x)大于0的点对应 y=1 的数据点，f(x)小于0的点对应y=-1的点，如下图所示：</p><p><img src="http://img.blog.csdn.net/20140829134548371" alt=""></p><p>注：有的资料上定义特征到结果的输出函数<br><img src="http://img.blog.csdn.net/20131120103601656" alt="">，与这里定义的$w^Tx+ b$实质是一样的。为什么？因为无论是哪个，不影响最终优化结果。下文你将看到，当我们转化到优化</p><p><img src="http://img.my.csdn.net/uploads/201210/25/1351141837_7366.jpg" alt="">的时候，为了求解方便，会把yf(x)令为1，即yf(x)是y(w^x + b)，还是y(w^x - b)，对我们要优化的式子max1/||w||已无影响。<br>（有一朋友飞狗来自Mare_Desiderii，看了上面的定义之后，问道：请教一下SVM functional margin 为=y(wTx+b)=yf(x)中的Y是只取1和-1 吗？y的唯一作用就是确保functional margin的非负性？真是这样的么？当然不是，详情请见本文评论下第43楼）</p><p>换言之，在进行分类的时候，遇到一个新的数据点x，将x代入f(x) 中，如果f(x)小于0则将x的类别赋为-1，如果f(x)大于0则将x的类别赋为1。</p><p>接下来的问题是，如何确定这个超平面呢？从直观上而言，这个超平面应该是最适合分开两类数据的直线。而判定“最适合”的标准就是这条直线离直线两边的数据的间隔最大。所以，得寻找有着最大间隔的超平面。</p><h2 id="3-函数间隔function-margin和集合间隔geometrical-margin"><a href="#3-函数间隔function-margin和集合间隔geometrical-margin" class="headerlink" title="3. 函数间隔function margin和集合间隔geometrical margin"></a>3. 函数间隔function margin和集合间隔geometrical margin</h2><p>在超平面w<em>x+b=0确定的情况下，|w</em>x+b|能够表示点x到距离超平面的远近，而通过观察w<em>x+b的符号与类标记y的符号是否一致可判断分类是否正确，所以，可以用(y</em>(w*x+b))的正负性来判定或表示分类的正确性。于此，我们便引出了函数间隔（functional margin）的概念。</p><p>定义函数间隔（用表示）为：<br><img src="http://img.blog.csdn.net/20131107201248921" alt=""><br>而超平面(w，b)关于T中所有样本点(xi，yi)的函数间隔最小值（其中，x是特征，y是结果标签，i表示第i个样本），便为超平面(w, b)关于训练数据集T的函数间隔：<br><img src="http://img.blog.csdn.net/20131111154113734" alt=""></p><p>但这样定义的函数间隔有问题，即如果成比例的改变w和b（如将它们改成2w和2b），则函数间隔的值f(x)却变成了原来的2倍（虽然此时超平面没有改变），所以只有函数间隔还远远不够。</p><p>事实上，我们可以对法向量w加些约束条件，从而引出真正定义点到超平面的距离–几何间隔（geometrical margin）的概念。</p><p>假定对于一个点 x ，令其垂直投影到超平面上的对应点为 x0 ，w 是垂直于超平面的一个向量，为样本x到超平面的距离，如下图所示<br><img src="http://blog.pluskid.org/wp-content/uploads/2010/09/geometric_margin.png" alt=""></p><p>根据平面几何知识，有<br><img src="http://img.blog.csdn.net/20131107201720515" alt=""></p><p>其中||w||为w的二阶范数（范数是一个类似于模的表示长度的概念），是单位向量（一个向量除以它的模称之为单位向量）。</p><p>又由于 x0 是超平面上的点，满足 f(x0)=0 ，代入超平面的方程$w^Tx+ b = 0$，可得$w^Tx_0+ b = 0$，即$w^Tx_0= -b$。</p><p>随即让此式<img src="http://img.blog.csdn.net/20131107201720515" alt="">的两边同时乘以$w^T$，再根据$w^Tx_0= -b$和$w^Tw= ||w||^2$，即可算出：<br><img src="http://img.blog.csdn.net/20131107201759093" alt=""></p><p>为了得到r的绝对值，令r乘上对应的类别 y，即可得出几何间隔（用表示）的定义：<br><img src="http://img.blog.csdn.net/20131107201919484" alt=""></p><p>从上述函数间隔和几何间隔的定义可以看出：几何间隔就是函数间隔除以||w||，而且函数间隔y<em>(wx+b) = y</em>f(x)实际上就是|f(x)|，只是人为定义的一个间隔度量，而几何间隔|f(x)|/||w||才是直观上的点到超平面的距离。</p><h2 id="4-最大间隔分类器Maximum-Margin-Classifier的定义"><a href="#4-最大间隔分类器Maximum-Margin-Classifier的定义" class="headerlink" title="4. 最大间隔分类器Maximum Margin Classifier的定义"></a>4. 最大间隔分类器Maximum Margin Classifier的定义</h2><p>对一个数据点进行分类，当超平面离数据点的“间隔”越大，分类的确信度（confidence）也越大。所以，为了使得分类的确信度尽量高，需要让所选择的超平面能够最大化这个“间隔”值。这个间隔就是下图中的Gap的一半。<br><img src="http://img.blog.csdn.net/20140829135959290" alt=""></p><p>通过由前面的分析可知：函数间隔不适合用来最大化间隔值，因为在超平面固定以后，可以等比例地缩放w的长度和b的值，这样可以使得$f(x)=w^Tx+ b$的值任意大，亦即函数间隔可以在超平面保持不变的情况下被取得任意大。但几何间隔因为除上了||w||，使得在缩放w和b的时候几何间隔的值是不会改变的，它只随着超平面的变动而变动，因此，这是更加合适的一个间隔。换言之，这里要找的最大间隔分类超平面中的“间隔”指的是几何间隔。</p><p>于是最大间隔分类器（maximum margin classifier）的目标函数可以定义为：<br>$$max\hat{\gamma}$$</p><p>同时需满足一些条件，根据间隔的定义，有</p><p><img src="http://img.my.csdn.net/uploads/201210/25/1351141813_4166.jpg" alt=""></p><p>其中，s.t.，即subject to的意思，它导出的是约束条件。</p><p>回顾下几何间隔的定义</p><p><img src="http://img.blog.csdn.net/20131107201919484" alt=""></p><p>可知：如果令函数间隔等于1（之所以令等于1，是为了方便推导和优化，且这样做对目标函数的优化没有影响，至于为什么，请见本文评论下第42楼回复），则有$\gamma = 1 / ||w||$且<img src="http://img.my.csdn.net/uploads/201210/25/1351141813_4166.jpg" alt="">，从而上述目标函数转化成了</p><p><img src="http://img.my.csdn.net/uploads/201210/25/1351141837_7366.jpg" alt=""></p><p>相当于在相应的约束条件<img src="http://img.my.csdn.net/uploads/201210/25/1351141813_4166.jpg" alt="">下，最大化这个1/||w||值，而1/||w||便是几何间隔$\hat{\gamma}$。   </p><p>如下图所示，中间的实线便是寻找到的最优超平面（Optimal Hyper Plane），其到两条虚线边界的距离相等，这个距离便是几何间隔$\hat{\gamma}$，两条虚线间隔边界之间的距离等于2$\hat{\gamma}$，而虚线间隔边界上的点则是支持向量。由于这些支持向量刚好在虚线间隔边界上，所以它们满足<img src="http://img.blog.csdn.net/20131111155244218" alt="">（还记得我们把 functional margin 定为 1 了吗？上节中：处于方便推导和优化的目的，我们可以令$\hat{\gamma}$=1），而对于所有不是支持向量的点，则显然有<img src="http://img.blog.csdn.net/20131111155205109" alt="">。</p><p><img src="http://img.blog.csdn.net/20140829141714944" alt=""></p><p>OK，到此为止，算是了解到了SVM的第一层，对于那些只关心怎么用SVM的朋友便已足够，不必再更进一层深究其更深的原理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://p3nyp7kdl.bkt.clouddn.com/wallpaper-photo-1508367125578-6246f83905f7.jpg&quot; alt=&quot;wallpaper-photo-1508367125578-6246f83905f7&quot;&gt;&lt;br&gt;适用于初学SVM&lt;br&gt;
    
    </summary>
    
      <category term="机器学习" scheme="http://berryk.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="机器学习" scheme="http://berryk.top/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数据结构（二）</title>
    <link href="http://berryk.top/archives/266a3580.html"/>
    <id>http://berryk.top/archives/266a3580.html</id>
    <published>2018-02-02T22:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="线性数据结构"><a href="#线性数据结构" class="headerlink" title="线性数据结构"></a>线性数据结构</h1><p>例：以下数据结构中，（）是非线性数据结构<br>A.树<br>B.字符串<br>C.队<br>D.栈</p><ol><li><p>线性结构 是一个有序数据元素的集合。 </p><p>a. 其中数据元素之间的关系是一对一的关系，即除了第一个和最后一个数据元素之外，其它数据元素都是首尾相接的。 </p><p>b. 常用的线性结构有：线性表，栈，队列，双队列，数组，串</p></li><li><p>非线性结构 中各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或者多个其他数据元素发生联系。</p><p>a. 根据关系的不同，可分为层次结构和群结构。</p><p>b. 常见的非线性结构有：二维数组，多维数组，广义表，树(二叉树等)，图</p></li></ol><h1 id="字符串输出"><a href="#字符串输出" class="headerlink" title="字符串输出"></a>字符串输出</h1><p>有字符数组 a[80] 和 b[80]，则正确的输出语句是（）<br>A.puts(a); puts(b);<br>B.printf(“%s,%s”, a[], b[]);<br>C.putchar(a, b);<br>D.puts(a, b);</p><ol><li>puts（）输出一个字符串，遇到’\0’结束，putchar（）输出单个字符</li><li>puts()函数用来向标准输出设备（屏幕）写字符串并换行，其调用方式为，puts(s)；其中s为字符串字符（字符串数组名或字符串指针）。 用法：int puts(const char *string);</li></ol><p>则程序的输出结果是: H 9<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">main( ) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">char</span> c1,c2;</span><br><span class="line">    c1 =<span class="string">'C'</span>+<span class="string">'8'</span>－<span class="string">'3'</span>;</span><br><span class="line">    c2 =<span class="string">'9'</span>－<span class="string">'0'</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%c %d\n"</span>,c1,c2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分析：</p><ol><li>string 和 int 型都支持直接加减</li><li>‘C’+’8’-‘3’= ‘C’+’5’,由于’C’+1=’D’，所以结果为char ‘H’ =&gt; %c；</li><li>‘9’-‘0’：平时写代码的时候经常int（0~9）转换char就用的+’0’,因此结果直接就是int 9 =&gt; %d。</li><li>本题考查字符变量以及printf( )函数相关知识,字符变量c1被赋值为’C’+’8’－’3’,即ASSCII码的运算,67十54－49=72,即H;字符变量 c2被赋值为’9’－’0’,但输出时,需要注意的是c1以字符变量输出,而c2是以十进制整型变量输出。</li></ol><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>设栈的初始状态为空，当字符序列a3_作为栈的输入时，输出长度为3的且可以用作C语言标识符的字符串序列有（3）个。</p><ol><li><p>首先，栈的顺序是先进后出字符序列为a3<em><br> 1)a入栈，再出栈，然后3入栈，再出栈，—入栈，再出栈   序列是a3</em><br> 2)a入栈，再出栈,然后3,—入栈，再出栈，序列是a<em>3<br> 3)a入栈，3入栈，再出栈，a出栈， —入栈，再出栈   序列是3a</em><br> 4) a入栈，3入栈，再出栈, —入栈,序列是3<em>a<br> 5) a入栈，3入栈,</em>入栈，序列是<em>3a<br>其次，C语言的标识符不能以数字开头，去除3a</em>和3_a   答案为3</p></li><li><p>补充一下卡特兰数公式 h(n)=C(2n，n)/(n+1)，适用于出栈情况求和.】</p></li><li><p>根据卡特兰数公式，所有的输出总数为5次，减掉3开头的2个为3个。</p></li></ol><h1 id="栈和队"><a href="#栈和队" class="headerlink" title="栈和队"></a>栈和队</h1><p>栈：先进后出；栈只能在栈顶插入和删除数据。</p><p>栈的应用：<br>    1、符号匹配；<br>    2、表达式求值；<br>    3、实现函数调用<br>    4、栈是解决封闭对应问题的有效方法。</p><p>栈是限定在一端进行插入与删除的线性表，允许插入与删除的一端称为栈顶，不允许插入与删除的另一端称为栈底。栈按照“先进后出”(FILO)或“后进先出”(LIFO)组织数据，栈具有记忆作用 </p><p>队：先进先出；队列只能在队尾插入数据，在队首删除数据</p><p>在递归算法执行过程中，计算机系统必定会用到的数据结构是（ 栈）</p><p>   递归的过程，利用栈保存现场地址，然后将数据入栈，运算，后出栈，返回结果。</p><h1 id="中缀表达式"><a href="#中缀表达式" class="headerlink" title="中缀表达式"></a>中缀表达式</h1><p>已知-算术表达式的中缀表达式为a-(b+c/d)<em>e,其后缀形式为()<br>A. -a+b</em>c/d<br>B.-a+b<em>cd/e<br>C.-+</em>abc/de<br>D.abcd/+e*-</p><ol><li><p>后缀表达式不包含括号，运算符 放在两个运算对象的后面，所有的计算按运算符出现的顺序，严格从左向右进行（不再考虑运算符的优先规则）<br>先是c/d写为cd/，(b+c/d)写为bcd/+，(b+c/d)<em>e写为bcd/+e</em>,a- ( b+c/d)<em>e写为abcd/+e</em>-。</p></li><li><p>这里我给出一个中缀表达式：a+b<em>c-(d+e)<br>第一步：按照运算符的优先级对所有的运算单位加括号：式子变成了：((a+(b</em>c))-(d+e))<br>第二步：转换前缀与后缀表达式<br>前缀：把运算符号移动到对应的括号前面<br>则变成了：-( +(a <em>(bc)) +(de))<br>把括号去掉：-+a</em>bc+de 前缀式子出现<br>后缀：把运算符号移动到对应的括号后面<br>则变成了：((a(bc)<em> )+ (de)+ )-<br>把括号去掉：abc</em>+de+- 后缀式子出现</p></li><li><p>中序遍历，运算符一定是父节点。</p></li></ol><h1 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h1><p>若要删除 book 表中的所有数据，如下哪些语法是错误的？<br>A.drop table book;<br>B.truncate table book;<br>C.delete from book;<br>D.delelet *from book;</p><p>A： drop table book 是删除整个表，题目的潜在意思是删除表中的数据而并非删除整个表。因此A错。<br>B： truncate table book 是删除表中的数据，删除速度比delete更快，无法撤回（回退）。<br>C： delete from book  删除数据表中的数据，可以回退，可添加where 子句。<br>D：语法错误。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;线性数据结构&quot;&gt;&lt;a href=&quot;#线性数据结构&quot; class=&quot;headerlink&quot; title=&quot;线性数据结构&quot;&gt;&lt;/a&gt;线性数据结构&lt;/h1&gt;&lt;p&gt;例：以下数据结构中，（）是非线性数据结构&lt;br&gt;A.树&lt;br&gt;B.字符串&lt;br&gt;C.队&lt;br&gt;D.栈&lt;/p&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://berryk.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://berryk.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://berryk.top/tags/%E5%A0%86/"/>
    
      <category term="栈" scheme="http://berryk.top/tags/%E6%A0%88/"/>
    
      <category term="图" scheme="http://berryk.top/tags/%E5%9B%BE/"/>
    
      <category term="树" scheme="http://berryk.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="http://berryk.top/archives/fc81fbfd.html"/>
    <id>http://berryk.top/archives/fc81fbfd.html</id>
    <published>2018-02-01T22:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>例：下面 是‘ abcd321ABCD ’的子串。D<br>A.abcd<br>B.321ab<br>C.‘abc ABC’<br>D.‘21AB’</p><ol><li>串中任意个连续的字符组成的子序列称为该串的子串。</li><li>空串和本身都算做本字符串的字串。</li></ol><p>将两个字符串连接起来组成一个字符串时，选用（   ）函数。<br>A.strlen()<br>B.strcap()<br>C.strcat()<br>D.strcmp()</p><ol><li>strcat()字符串连接字符</li><li>strcmp()字符串大小比较</li></ol><h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><p>不能把字符串”HELLO!”赋给数组b的语句是（）<br>A.char b[10]={‘H’，’E’，’L’，’L’，’O’，’!’，’\0’};<br>B.char b[10];b=”HELLO!”;<br>C.char b[10];strcpy(b，”HELLO!”);<br>D.char b[10]=”HELLO!”;</p><p>字符数组初始化有两种方法：<br>一种是逐个字符赋值，另一种是用字符常量对整个数组赋值。</p><p>A是第一种，D是第二种。显然第一种比第二种繁琐复杂。</p><p>选项B并没有将数组b赋值为 hello！ 因子b是数组的首地址，b=”HELLO!”;是改变了这个指针的指向，是错误的。</p><p> C是字符串拷贝函数。<br>函数格式： char <em>strcpy (char </em>s1, const char *s2);<br>功能： 将S2所指的字符串拷贝到S1所指的字符串中。<br>说明：<br>（1）参数S1S2都是指向字符串的指针。S1可以是字符数组名或字符指针，但不能是字符型常量，S2可以是字符串常量、字符数组或字符指针。<br>（2）将S2所指的字符串拷贝到S1所指的字符串中，用赋值语句S1=S2;是不行的，赋值语句要求左边是左值，S1是常量。 （3）要保证S1的长度足够大，以便能容纳下S2所指的字符串，否则引起错误。 C 对于非strtic型数组不初始化，其元素值不能确定。对strtic数组元素不赋初值，系统会自动赋以0值。（参考）</p><h1 id="安全值？"><a href="#安全值？" class="headerlink" title="安全值？"></a>安全值？</h1><p>判断下述语句的对错：MFC中CString是类型安全的类。（对）</p><ol><li><p>类型安全就是说，如果两个类型直接要相互转换，必须要显示的转换，不能偷偷摸摸的只用一个等于号就隐式转换了。</p></li><li><p>MFC数据类型转换标准库std的string 和MFC类库CString之间可以通过CString的format方法进行转换</p></li><li><p>类型安全不是一种类型，是有关类型操作一种规范。</p></li></ol><p>如：不让不同类型的数据相互转换<br>int Num =3;<br>string Str=”3”;<br>Num =Str; //错<br>Num=int.Parse(Str);//对<br>类型安全要求可以相互转换的不同类型数据在转换时 显式转换</p><h1 id="字符串倒序"><a href="#字符串倒序" class="headerlink" title="字符串倒序"></a>字符串倒序</h1><p>请找出下面代码中的所有错误。说明：以下代码是把一个字符串倒序，如“abcd”倒序后变为“dcba”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *src = <span class="string">"hello,world"</span>;</span><br><span class="line">    <span class="keyword">char</span> *dest = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="keyword">char</span> *d = dest;</span><br><span class="line">    <span class="keyword">char</span> *s = src[len];</span><br><span class="line">   <span class="keyword">while</span> (len-- != <span class="number">0</span>)</span><br><span class="line">      *d++ = *s--;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%s"</span>, dest);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第7行要为’\0’分配一个空间</li><li>第9行改成char * s = &amp;src[len-1]</li><li>第12行前要加上*d = ‘\0’</li><li>第13行前要加上free(dest)释放空间</li></ol><p>方法一：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *src = <span class="string">"hello,world"</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    <span class="keyword">char</span> *dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>); <span class="comment">//要为\0分配一个空间</span></span><br><span class="line">    <span class="keyword">char</span> *d = dest;</span><br><span class="line">    <span class="keyword">char</span> *s = &amp;src[len - <span class="number">1</span>]; <span class="comment">//指向最后一个字符</span></span><br><span class="line">    <span class="keyword">while</span> ( len-- != <span class="number">0</span> )</span><br><span class="line">        *d++ = *s--;</span><br><span class="line">    *d = <span class="number">0</span>; <span class="comment">//尾部要加\0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, dest);</span><br><span class="line">    <span class="built_in">free</span>(dest);<span class="comment">// 使用完，应当释放空间，以免造成内存汇泄露</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"hello,world"</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">char</span> t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = str[i];</span><br><span class="line">        str[i] = str[len - i - <span class="number">1</span>]; </span><br><span class="line">        str[len - i - <span class="number">1</span>] = t;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;例：下面 是‘ abcd321ABCD ’的子串。D&lt;br&gt;A.abcd&lt;br&gt;B.321ab&lt;br&gt;C.‘abc ABC’&lt;br&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://berryk.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://berryk.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://berryk.top/tags/%E5%A0%86/"/>
    
      <category term="栈" scheme="http://berryk.top/tags/%E6%A0%88/"/>
    
      <category term="图" scheme="http://berryk.top/tags/%E5%9B%BE/"/>
    
      <category term="树" scheme="http://berryk.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构（四）</title>
    <link href="http://berryk.top/archives/dc598fb7.html"/>
    <id>http://berryk.top/archives/dc598fb7.html</id>
    <published>2018-02-01T22:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>例：下面 是‘ abcd321ABCD ’的子串。D<br>A.abcd<br>B.321ab<br>C.‘abc ABC’<br>D.‘21AB’</p><ol><li>串中任意个连续的字符组成的子序列称为该串的子串。</li><li>空串和本身都算做本字符串的字串。</li></ol><p>将两个字符串连接起来组成一个字符串时，选用（   ）函数。<br>A.strlen()<br>B.strcap()<br>C.strcat()<br>D.strcmp()</p><ol><li>strcat()字符串连接字符</li><li>strcmp()字符串大小比较</li></ol><h1 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h1><p>不能把字符串”HELLO!”赋给数组b的语句是（）<br>A.char b[10]={‘H’，’E’，’L’，’L’，’O’，’!’，’\0’};<br>B.char b[10];b=”HELLO!”;<br>C.char b[10];strcpy(b，”HELLO!”);<br>D.char b[10]=”HELLO!”;</p><p>字符数组初始化有两种方法：<br>一种是逐个字符赋值，另一种是用字符常量对整个数组赋值。</p><p>A是第一种，D是第二种。显然第一种比第二种繁琐复杂。</p><p>选项B并没有将数组b赋值为 hello！ 因子b是数组的首地址，b=”HELLO!”;是改变了这个指针的指向，是错误的。</p><p> C是字符串拷贝函数。<br>函数格式： char <em>strcpy (char </em>s1, const char *s2);<br>功能： 将S2所指的字符串拷贝到S1所指的字符串中。<br>说明：<br>（1）参数S1S2都是指向字符串的指针。S1可以是字符数组名或字符指针，但不能是字符型常量，S2可以是字符串常量、字符数组或字符指针。<br>（2）将S2所指的字符串拷贝到S1所指的字符串中，用赋值语句S1=S2;是不行的，赋值语句要求左边是左值，S1是常量。 （3）要保证S1的长度足够大，以便能容纳下S2所指的字符串，否则引起错误。 C 对于非strtic型数组不初始化，其元素值不能确定。对strtic数组元素不赋初值，系统会自动赋以0值。（参考）</p><h1 id="安全值？"><a href="#安全值？" class="headerlink" title="安全值？"></a>安全值？</h1><p>判断下述语句的对错：MFC中CString是类型安全的类。（对）</p><ol><li><p>类型安全就是说，如果两个类型直接要相互转换，必须要显示的转换，不能偷偷摸摸的只用一个等于号就隐式转换了。</p></li><li><p>MFC数据类型转换标准库std的string 和MFC类库CString之间可以通过CString的format方法进行转换</p></li><li><p>类型安全不是一种类型，是有关类型操作一种规范。</p></li></ol><p>如：不让不同类型的数据相互转换<br>int Num =3;<br>string Str=”3”;<br>Num =Str; //错<br>Num=int.Parse(Str);//对<br>类型安全要求可以相互转换的不同类型数据在转换时 显式转换</p><h1 id="字符串倒序"><a href="#字符串倒序" class="headerlink" title="字符串倒序"></a>字符串倒序</h1><p>请找出下面代码中的所有错误。说明：以下代码是把一个字符串倒序，如“abcd”倒序后变为“dcba”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"string.h"</span></span></span><br><span class="line"> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *src = <span class="string">"hello,world"</span>;</span><br><span class="line">    <span class="keyword">char</span> *dest = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="keyword">char</span> *d = dest;</span><br><span class="line">    <span class="keyword">char</span> *s = src[len];</span><br><span class="line">   <span class="keyword">while</span> (len-- != <span class="number">0</span>)</span><br><span class="line">      *d++ = *s--;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%s"</span>, dest);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>第7行要为’\0’分配一个空间</li><li>第9行改成char * s = &amp;src[len-1]</li><li>第12行前要加上*d = ‘\0’</li><li>第13行前要加上free(dest)释放空间</li></ol><p>方法一：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *src = <span class="string">"hello,world"</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    <span class="keyword">char</span> *dest = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>); <span class="comment">//要为\0分配一个空间</span></span><br><span class="line">    <span class="keyword">char</span> *d = dest;</span><br><span class="line">    <span class="keyword">char</span> *s = &amp;src[len - <span class="number">1</span>]; <span class="comment">//指向最后一个字符</span></span><br><span class="line">    <span class="keyword">while</span> ( len-- != <span class="number">0</span> )</span><br><span class="line">        *d++ = *s--;</span><br><span class="line">    *d = <span class="number">0</span>; <span class="comment">//尾部要加\0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, dest);</span><br><span class="line">    <span class="built_in">free</span>(dest);<span class="comment">// 使用完，应当释放空间，以免造成内存汇泄露</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法二<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> str[] = <span class="string">"hello,world"</span>;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">char</span> t;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        t = str[i];</span><br><span class="line">        str[i] = str[len - i - <span class="number">1</span>]; </span><br><span class="line">        str[len - i - <span class="number">1</span>] = t;      </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;例：下面 是‘ abcd321ABCD ’的子串。D&lt;br&gt;A.abcd&lt;br&gt;B.321ab&lt;br&gt;C.‘abc ABC’&lt;br&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://berryk.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://berryk.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://berryk.top/tags/%E5%A0%86/"/>
    
      <category term="栈" scheme="http://berryk.top/tags/%E6%A0%88/"/>
    
      <category term="图" scheme="http://berryk.top/tags/%E5%9B%BE/"/>
    
      <category term="树" scheme="http://berryk.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>数据结构（三）</title>
    <link href="http://berryk.top/archives/6b7496d2.html"/>
    <id>http://berryk.top/archives/6b7496d2.html</id>
    <published>2018-01-31T22:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="折半查找与顺序查找"><a href="#折半查找与顺序查找" class="headerlink" title="折半查找与顺序查找"></a>折半查找与顺序查找</h1><p>两者查找速度比较：<br>例如在一个数组中有10个元素.</p><ol><li><p>第一个是要找的元素.<br>折半查找：先找第六（下标为5）个,再找第三个（下标为2）,然后是第二个（下标为1）,最后是第一个（下标为0）…<br>顺序查找：只要找一次就ok了.</p></li><li><p>第10个是要找的元素.<br>折半查找：先找第六（下标为5）个,再找第八个（下标为7）,然后是第九个（下标为8）,最后是第十个（下标为9）…<br>顺序查找：需要10次.</p></li><li><p>第三个是要找的元素.<br>折半查找：先找第六（下标为5）个,再找第三个（下标为2）<br>顺序查找：需要三次（效率一样）.</p></li></ol><h1 id="折半查找"><a href="#折半查找" class="headerlink" title="折半查找"></a>折半查找</h1><p>用向量和单链表示的有序表均可使用折半查找方法来提高查找速度(错)</p><ol><li>折半查找属于随机访问特性 链表不行</li><li>堆排序也不能用链表 因为调整堆时没法随机访问底层孩子节点</li><li>快速排序可以链表</li><li>归并排序可用链表</li><li>基数排序可用链表</li><li>插入排序链表比数组要快一些 减少移动次数</li></ol><p>具有12个关键字的有序表,折半查找的平均查找长度()</p><p>将12个数画成完全二叉树，第一层有1个、第二次2个、第三层4个，第四层只有5个。<br>二分查找时：<br>第一层需要比较1次<br>第二两个数，每个比较2次<br>第三层四个数，每个比较3次<br>第四层五个数，每个比较4次<br>则平均查找长度即为：（1+2<em>2+3</em>4+4*5）/12 = 37/12 = 3.0833 即为 A、3.1</p><h1 id="动态查找与静态查找"><a href="#动态查找与静态查找" class="headerlink" title="动态查找与静态查找"></a>动态查找与静态查找</h1><p>适于对动态查找表进行高效率查找的组织结构是分块有序表(错)</p><ol><li>分块查找是静态查找</li><li>动态查找有二叉排序树查找，最优二叉树查找，键树查找，哈希表查找</li></ol><p>静态查找表只进行以下2个操作：<br>    1.查找某个“特定”数据元素是否在查找表中<br>    2.查找某个“特定”数据元素的各种属性<br>    有序表、分块有序表、线性链表都是静态查找表<br>性能分析：平均查找长度：（当查找关键字等概率时）ASL = 1/(n+1)</p><p>动态查找表:表结构是在查找过程中动态生成的，通俗解释，对于给定key,若表中存在某关键字与key相等则查找成功返回，若未找到则插入关键字等于key的记录。<br>        二叉排序树、平衡二叉树、B树、B+树都是动态查找。（对查找表进行插入和删除操作—即为动态的）</p><h1 id="平均查找长度"><a href="#平均查找长度" class="headerlink" title="平均查找长度"></a>平均查找长度</h1><p>就平均查找长度而言,分块查找最小,折半查找次之,顺序查找最大(错)</p><p> 分快查找，是将顺序表分为若干块，块内元素顺序任意，块间有序，即前一块中的最大值小于后一块中的最小值。并且有一张索引表，每一项存放每一块的最大值和指向该块第一个元素的指针。索引表有序，块内无序。所以，块间查找用二分查找，块内用顺序查找，效率介于顺序和二分之间。</p><p>分块查找：<br>1.将顺序表分为若干块，除最后一块，前面每块元素相等，块间有序，块内无序<br>2.索引表内元素有序，用二分折半查找，每块内元素无序，用顺序查找<br>3.所以分块查找介于折半查找和顺序查找之间</p><h1 id="判断是否有环"><a href="#判断是否有环" class="headerlink" title="判断是否有环"></a>判断是否有环</h1><p>判断是否有环方法：<br>1.拓扑排序<br>2.深度优先遍历<br>3.广度优先遍历</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;折半查找与顺序查找&quot;&gt;&lt;a href=&quot;#折半查找与顺序查找&quot; class=&quot;headerlink&quot; title=&quot;折半查找与顺序查找&quot;&gt;&lt;/a&gt;折半查找与顺序查找&lt;/h1&gt;&lt;p&gt;两者查找速度比较：&lt;br&gt;例如在一个数组中有10个元素.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="数据结构" scheme="http://berryk.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://berryk.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://berryk.top/tags/%E5%A0%86/"/>
    
      <category term="栈" scheme="http://berryk.top/tags/%E6%A0%88/"/>
    
      <category term="图" scheme="http://berryk.top/tags/%E5%9B%BE/"/>
    
      <category term="树" scheme="http://berryk.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>栈，队，数组</title>
    <link href="http://berryk.top/archives/d35f19b0.html"/>
    <id>http://berryk.top/archives/d35f19b0.html</id>
    <published>2018-01-30T15:09:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="用两个栈来实现一个队列"><a href="#用两个栈来实现一个队列" class="headerlink" title="用两个栈来实现一个队列"></a>用两个栈来实现一个队列</h1><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型</p><p>&lt;分析&gt;：</p><p>入队：将元素进栈A</p><p>出队：判断栈B是否为空，如果为空，则将栈A中所有元素pop，并push进栈B，栈B出栈；</p><p> 如果不为空，栈B直接出栈。</p><p>用两个队列实现一个栈的功能?要求给出算法和思路!</p><p>&lt;分析&gt;：</p><p>入栈：将元素进队列A</p><p>出栈：判断队列A中元素的个数是否为1，如果等于1，则出队列，否则将队列A中的元素   以此出队列并放入队列B，直到队列A中的元素留下一个，然后队列A出队列，再把   队列B中的元素出队列以此放入队列A中。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> node)</span></span>&#123;</span><br><span class="line">        stack1.push(node);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a;</span><br><span class="line">        <span class="keyword">if</span>(stack2.empty())&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack1.empty())&#123;</span><br><span class="line">                a=stack1.top();</span><br><span class="line">                stack2.push(a);</span><br><span class="line">                stack1.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        a=stack2.top();</span><br><span class="line">        stack2.pop();</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack1;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; stack2;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><p>算法思路：</p><p>栈A用来作入队列<br>栈B用来出队列，当栈B为空时，栈A全部出栈到栈B,栈B再出栈（即出队列）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.stack1=[]</span><br><span class="line">        self.stack2=[]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span><span class="params">(self,node)</span>:</span></span><br><span class="line">        self.stack1.append(node)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self,node)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.stack2==[]:</span><br><span class="line">            <span class="keyword">while</span> self.stack1:</span><br><span class="line">                self.stack2.append(self.stack1,pop())</span><br><span class="line">            <span class="keyword">return</span> stack2.pop()</span><br><span class="line">        <span class="keyword">return</span> stack2.pop()</span><br></pre></td></tr></table></figure></p><h1 id="旋转数组的最小数字"><a href="#旋转数组的最小数字" class="headerlink" title="旋转数组的最小数字"></a>旋转数组的最小数字</h1><p>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minNumberInRotateArray</span><span class="params">(self, rotateArray)</span>:</span></span><br><span class="line">        <span class="comment"># write code here</span></span><br><span class="line">        <span class="keyword">if</span> len(rotateArray) == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">        ret = rotateArray[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> len(rotateArray) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> ret</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,len(rotateArray)):</span><br><span class="line">            now = rotateArray[i]</span><br><span class="line">            <span class="keyword">if</span> now &lt; ret:</span><br><span class="line">                ret = now</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure></p><p>剑指Offer中有这道题目的分析。这是一道二分查找的变形的题目。</p><p>旋转之后的数组实际上可以划分成两个有序的子数组：前面子数组的大小都大于后面子数组中的元素</p><p>注意到实际上最小的元素就是两个子数组的分界线。本题目给出的数组一定程度上是排序的，因此我们试着用二分查找法寻找这个最小的元素。</p><p>思路：</p><p>（1）我们用两个指针left,right分别指向数组的第一个元素和最后一个元素。按照题目的旋转的规则，第一个元素应该是大于最后一个元素的（没有重复的元素）。</p><p>但是如果不是旋转，第一个元素肯定小于最后一个元素。</p><p>（2）找到数组的中间元素。</p><p>中间元素大于第一个元素，则中间元素位于前面的递增子数组，此时最小元素位于中间元素的后面。我们可以让第一个指针left指向中间元素。</p><p>移动之后，第一个指针仍然位于前面的递增数组中。</p><p>中间元素小于第一个元素，则中间元素位于后面的递增子数组，此时最小元素位于中间元素的前面。我们可以让第二个指针right指向中间元素。</p><p>移动之后，第二个指针仍然位于后面的递增数组中。</p><p>这样可以缩小寻找的范围。</p><p>（3）按照以上思路，第一个指针left总是指向前面递增数组的元素，第二个指针right总是指向后面递增的数组元素。</p><p>最终第一个指针将指向前面数组的最后一个元素，第二个指针指向后面数组中的第一个元素。</p><p>也就是说他们将指向两个相邻的元素，而第二个指针指向的刚好是最小的元素，这就是循环的结束条件。</p><p>到目前为止以上思路很耗的解决了没有重复数字的情况，这一道题目添加上了这一要求，有了重复数字。</p><p>因此这一道题目比上一道题目多了些特殊情况：</p><p>我们看一组例子：｛1，0，1，1，1｝ 和 ｛1，1， 1，0，1｝ 都可以看成是递增排序数组｛0，1，1，1，1｝的旋转。</p><p>这种情况下我们无法继续用上一道题目的解法，去解决这道题目。因为在这两个数组中，第一个数字，最后一个数字，中间数字都是1。</p><p>第一种情况下，中间数字位于后面的子数组，第二种情况，中间数字位于前面的子数组。</p><p>因此当两个指针指向的数字和中间数字相同的时候，我们无法确定中间数字1是属于前面的子数组（绿色表示）还是属于后面的子数组（紫色表示）。</p><p>也就无法移动指针来缩小查找的范围。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">minNumberInRotateArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; rotateArray)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = rotateArray.size();</span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;<span class="comment">//if</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = size - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> mid = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// rotateArray[left] &gt;= rotateArray[right] 确保旋转</span></span><br><span class="line">        <span class="keyword">while</span>(rotateArray[left] &gt;= rotateArray[right])&#123;</span><br><span class="line">            <span class="comment">// 分界点</span></span><br><span class="line">            <span class="keyword">if</span>(right - left == <span class="number">1</span>)&#123;</span><br><span class="line">                mid = right;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="comment">//if</span></span><br><span class="line">            mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">// rotateArray[left] rotateArray[right] rotateArray[mid]三者相等</span></span><br><span class="line">            <span class="comment">// 无法确定中间元素是属于前面还是后面的递增子数组</span></span><br><span class="line">            <span class="comment">// 只能顺序查找</span></span><br><span class="line">            <span class="keyword">if</span>(rotateArray[left] == rotateArray[right] &amp;&amp; rotateArray[left] == rotateArray[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> MinOrder(rotateArray,left,right);</span><br><span class="line">            &#125;<span class="comment">//if</span></span><br><span class="line">            <span class="comment">// 中间元素位于前面的递增子数组</span></span><br><span class="line">            <span class="comment">// 此时最小元素位于中间元素的后面</span></span><br><span class="line">            <span class="keyword">if</span>(rotateArray[mid] &gt;= rotateArray[left])&#123;</span><br><span class="line">                left = mid;</span><br><span class="line">            &#125;<span class="comment">//if</span></span><br><span class="line">            <span class="comment">// 中间元素位于后面的递增子数组</span></span><br><span class="line">            <span class="comment">// 此时最小元素位于中间元素的前面</span></span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                right = mid;</span><br><span class="line">            &#125;<span class="comment">//else</span></span><br><span class="line">        &#125;<span class="comment">//while</span></span><br><span class="line">        <span class="keyword">return</span> rotateArray[mid];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 顺序寻找最小值</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">MinOrder</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;num,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = num[left];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = left + <span class="number">1</span>;i &lt; right;++i)&#123;</span><br><span class="line">            <span class="keyword">if</span>(num[i] &lt; result)&#123;</span><br><span class="line">                result = num[i];</span><br><span class="line">            &#125;<span class="comment">//if</span></span><br><span class="line">        &#125;<span class="comment">//for</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Solution s;</span><br><span class="line">    <span class="comment">//vector&lt;int&gt; num = &#123;0,1,2,3,4,5&#125;;</span></span><br><span class="line">    <span class="comment">//vector&lt;int&gt; num = &#123;4,5,6,7,1,2,3&#125;;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num = &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> result = s.minNumberInRotateArray(num);</span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;用两个栈来实现一个队列&quot;&gt;&lt;a href=&quot;#用两个栈来实现一个队列&quot; class=&quot;headerlink&quot; title=&quot;用两个栈来实现一个队列&quot;&gt;&lt;/a&gt;用两个栈来实现一个队列&lt;/h1&gt;&lt;p&gt;用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元
      
    
    </summary>
    
      <category term="剑指offer" scheme="http://berryk.top/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="查找" scheme="http://berryk.top/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="替换空格" scheme="http://berryk.top/tags/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    
      <category term="打印链表" scheme="http://berryk.top/tags/%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer（一）</title>
    <link href="http://berryk.top/archives/8ad708de.html"/>
    <id>http://berryk.top/archives/8ad708de.html</id>
    <published>2018-01-29T16:09:02.000Z</published>
    <updated>2018-02-15T05:38:26.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二维数组中的查找"><a href="#二维数组中的查找" class="headerlink" title="二维数组中的查找"></a>二维数组中的查找</h1><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p>算法思想：</p><ol><li>由于数组从左到右，从上到下都是递增，可以从右上角或者左下角开始查找，这里从右上角开始查找</li><li>定义数组array，行i，列j，目标target。</li><li>若<code>array[i][j]</code>==target,那恭喜你找到目标；</li><li>若<code>array[i][j]</code>&gt;target,那向左去找目标–j；</li><li>否则，<code>array[i][j]</code>小于target,那向下寻找目标++i；</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> target,<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; <span class="built_in">array</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">array</span>.size()!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">              <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">              <span class="keyword">int</span> j=<span class="built_in">array</span>[<span class="number">0</span>].size()<span class="number">-1</span>;</span><br><span class="line">              <span class="keyword">while</span>(i&lt; <span class="built_in">array</span>.size()&amp;&amp; j&gt;= <span class="number">0</span>)</span><br><span class="line">              &#123;</span><br><span class="line">                  <span class="keyword">if</span>(<span class="built_in">array</span>[i][j]== target)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">array</span>[i][j]&gt;target)</span><br><span class="line">                        --j;</span><br><span class="line">                  <span class="keyword">else</span></span><br><span class="line">                        ++i;</span><br><span class="line">               &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1><p>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy</p><p>算法思想：</p><ol><li>定义字符串下标i（i=0开始），定义空格bankNum,遍历字符串并计算空格个数；</li><li>总字符串=原始字符串下标+1+2*bankNum；</li><li>末尾字符串下标=totalNum-1，也就是我们说的放置位置；</li><li>总体来说：从后向前遍历字符串，如果遇到空格，就加%20；没有空格，就将原字符串的最后一个字符赋给新字符串</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">replaceSpaca</span><span class="params">(<span class="keyword">char</span> *str,<span class="keyword">int</span> length)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> bankNum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;str[i]!=<span class="string">'\0'</span>;++i)</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)</span><br><span class="line">        ++bankNum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> totalNum=i+<span class="number">1</span>+<span class="number">2</span>*bankNum;</span><br><span class="line">    <span class="keyword">int</span> pos=totalNum<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&gt;=<span class="number">0</span>;--i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(str[i]==<span class="string">' '</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            str[pos--]=<span class="string">'0'</span>;</span><br><span class="line">            str[pos--]=<span class="string">'2'</span>;</span><br><span class="line">            str[pos--]=<span class="string">'%'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            str[pos--]=str[i];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="打印链表"><a href="#打印链表" class="headerlink" title="打印链表"></a>打印链表</h1><p>输入一个链表，从尾到头打印链表每个节点的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printListFromTailToHead</span><span class="params">(self,listNode)</span>:</span></span><br><span class="line">        l=[]</span><br><span class="line">        head = listNode</span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            l.insert(<span class="number">0</span>,head.val)</span><br><span class="line">            head=head.next</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search2</span><span class="params">(a,m)</span>:</span></span><br><span class="line">    low=<span class="number">0</span></span><br><span class="line">    high=len(a)<span class="number">-1</span></span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high):</span><br><span class="line">        mid=(low+high)/<span class="number">2</span></span><br><span class="line">        midval=a[mid]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> midval&lt;m:</span><br><span class="line">            low=mid+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> midval&gt;m:</span><br><span class="line">            high=mid<span class="number">-1</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__==<span class="string">"__main__"</span></span><br><span class="line">       a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]</span><br><span class="line">       m=<span class="number">5</span></span><br><span class="line">       result=search2(a,m)</span><br><span class="line">       <span class="keyword">print</span> result</span><br></pre></td></tr></table></figure><p>下面这个程序就会陷入无限循环while中<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;studio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left, middle, right;</span><br><span class="line">    left=<span class="number">0</span>, right=n<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)</span><br><span class="line">    &#123;</span><br><span class="line">        middle=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[middle]&gt;v)</span><br><span class="line">        &#123;</span><br><span class="line">        right=middle</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a[middle]&lt;v)</span><br><span class="line">        &#123;</span><br><span class="line">        left=middle</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> middle;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下是正确写法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] a,<span class="keyword">int</span> n,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">0</span> &amp;&amp; x&gt;=a[<span class="number">0</span>])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>,right=n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;right)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> middle=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;a[middle])</span><br><span class="line">            right=middle<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">            left=middle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(x==a[left])</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h1><p>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"># class TreeNode:</span><br><span class="line">#     def __init__(self, x):</span><br><span class="line">#         self.val = x</span><br><span class="line">#         self.left = None</span><br><span class="line">#         self.right = None</span><br><span class="line">class Solution:</span><br><span class="line">    # 返回构造的TreeNode根节点</span><br><span class="line">    def reConstructBinaryTree(self, pre, tin):</span><br><span class="line">        # write code here</span><br><span class="line">        if len(pre) == 0:</span><br><span class="line">            return None</span><br><span class="line">        root = TreeNode(pre[0])</span><br><span class="line">        pos = tin.index(pre[0])</span><br><span class="line">        root.left = self.reConstructBinaryTree( pre[1:1+pos], tin[:pos])</span><br><span class="line">        root.right = self.reConstructBinaryTree( pre[pos+1:], tin[pos+1:])</span><br><span class="line">        return root</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二维数组中的查找&quot;&gt;&lt;a href=&quot;#二维数组中的查找&quot; class=&quot;headerlink&quot; title=&quot;二维数组中的查找&quot;&gt;&lt;/a&gt;二维数组中的查找&lt;/h1&gt;&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请
      
    
    </summary>
    
      <category term="剑指offer" scheme="http://berryk.top/categories/%E5%89%91%E6%8C%87offer/"/>
    
    
      <category term="查找" scheme="http://berryk.top/tags/%E6%9F%A5%E6%89%BE/"/>
    
      <category term="替换空格" scheme="http://berryk.top/tags/%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    
      <category term="打印链表" scheme="http://berryk.top/tags/%E6%89%93%E5%8D%B0%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构（一）</title>
    <link href="http://berryk.top/archives/167cd958.html"/>
    <id>http://berryk.top/archives/167cd958.html</id>
    <published>2018-01-28T20:02:00.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p>设字符串S=’ABCDEFG’,T=’PQRST’,则运算CONCAT(SUBSTR(S,2，LENGTH(T),SUBSTR(S,LENGTH(T),2) ))后的结果为（）<br>A.’BCQR’<br>B.’BCDEF’<br>C.’BCDEFG’<br>D.’BCDEFEF’</p><ol><li><p>oracle中取得字符串中指定起始位置和长度的字符串substr( string, start_position, [ length ] )，计数从1开始，字符串长度不带“\0”</p></li><li><p>concat() 方法用于连接两个或多个数组。 </p></li><li><p>substr是C++语言函数，主要功能是复制子字符串，要求从指定位置开始，并具有指定的长度。</p></li><li><p>SUBSTR(S,2，LENGTH(T) )</p></li><li>如果没有指定长度_Count或_Count+_Off超出了源字符串的长度，则子字符串将延续到源字符串的结尾。<br>oracle中字符下标从1开始，此处为从字符串S的第2个开始，截取长度为LENGTH(T)即5的字符串<br>结果为：BCDEF<br>SUBSTR(S,LENGTH(T),2)，从字符串S的第LENGTH(T)即第5个开始，截取长度为2的字符串<br>结果为：EF<br>CONCAT结果为：BCDEFEF</li></ol><p>下面关于字符串的描述正确的是：【多选】（ ）<br>A.通过String s1=new String(“abc”)和String s2=”abc”，则s1==s2为true。<br>B.”abc”+”def”则会创建三个字符串对象，第三个是”abcdef”。也就是说，在Java中对字符串的一切操作，都会产生一个新的字符串对象。<br>C.StringBuffer是线程安全的，它比String快。<br>D.StringBuilder是线程安全的，它比String快</p><ol><li>三者执行速度：StringBuilder &gt; StringBuffer &gt; String ；</li><li>StringBuilder：线程非安全的；</li><li>StringBuffer：线程安全的；</li><li>用String操作字符串时，实际上是在不断地创建新对象，而原来的对象会作为垃圾被回收；</li></ol><p>对于A： s1利用new 操作后，为该对象在堆（Heap）区分配了一块内存； s2是字符串常量，存放在内存的”文字常量区“ ；虽然两个对象的值相同，但由于两者位于不同的地址，不是相同的对象，因此 s1==s2 为false。 A错</p><h1 id="多型数据类型"><a href="#多型数据类型" class="headerlink" title="多型数据类型"></a>多型数据类型</h1><ol><li>多型数据类型是指包含的数据元素的类型并不确定。</li><li>比如栈可以是整数栈、字符栈、对象栈等等。</li><li><p>但是字符串，它的元素必然是字符。</p></li><li><p>设模式串的长度为m,目标串的长度为n,当n≈m且处理只匹配一次的模式时,朴素的匹配(即子串定位函数)算法所花的时间代价可能会更为节省()<br>A.对<br>B.错</p></li></ol><p>朴素的匹配只匹配一次，不用计算next数组，所以速度更快</p><p>字符串的朴素算法(就是暴力搜索）</p><hr><h1 id="子串"><a href="#子串" class="headerlink" title="子串"></a>子串</h1><ol><li>n 个字符构成的字符串，假设每个字符都不一样，问有多少个子串？<br>A. n+1<br>B.n(n+1)/2 + 1<br>C.2^n-1<br>D.n!</li></ol><p>这么想就很简单：<br>长度为 1 的字符串 n 个<br>长度为 2 的 n-1 个<br>长度为 3 的 n-2 个<br>…<br>长度为 n 的 1 个<br>然后 n+(n-1)+(n-2)+…+1 =n(n+1)/2</p><ol><li>下面程序段的输出结果是D</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> *p1 = ”<span class="number">123</span>”, *p2 = ”ABC”, str[<span class="number">50</span>] = “xyz”;</span><br><span class="line"><span class="built_in">strcpy</span>(str + <span class="number">2</span>, <span class="built_in">strcat</span>(p1, p2));</span><br><span class="line"><span class="built_in">printf</span>(“%s\n”, str);</span><br></pre></td></tr></table></figure><p>A.xyz123ABC<br>B.z123ABC<br>C.xy123ABC<br>D.出错</p><p>原代码有错：</p><ol><li>p1和p2都指向常量字符串，在常量区，所以不能对其进行操作；</li><li>改为数组即可，但是用字符串初始化数组时要记得将数组长度加1，因为字符串默认的末尾有一个‘\0’；</li><li>第二点要注意的是，strcat函数的p1要有足够的空间来容纳p1和p2连接后的串长。</li></ol><p>修改为以下代码将可以：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> p1[<span class="number">7</span>] = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">char</span> p2[] = <span class="string">"ABC"</span>;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">50</span>] = <span class="string">"xyz"</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(str + <span class="number">2</span>, <span class="built_in">strcat</span>(p1, p2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, str);</span><br></pre></td></tr></table></figure></p><p>char *p1=”123” 声明了个字符串指针p1，指向字符串“ 123 ”，此时的“ 123 ”存放在常量区，并没有在拷贝到栈中，所以不能修改，如修改p1[0] = ‘2’就是错误的。<br>建议改为char p1[10] = “123”，就可以修改p1的值。</p><h1 id="空串和由空格组成的串"><a href="#空串和由空格组成的串" class="headerlink" title="空串和由空格组成的串"></a>空串和由空格组成的串</h1><ol><li>空串：a=“没有东西”；</li><li>空格串：b=“空格空格”</li><li>所以空串和空格串是不一样的</li><li>想像使用split()方法时，这两个参数得到的结果肯定不一样</li></ol><p>#有关赋值<br>不能所字符串“Good!”存放到数组 s 中的代码是（D）<br>A.char s[8] = {‘G’,’o’,’o’,’d’,’!’, ‘\0’};<br>B.char s[8];<br>strcpy(s, “Good!”);<br>C.char s[8];<br>s = “Good!”;<br>D.char s[8] = “Good!”;</p><ol><li>char数组只有在初始化的时候才能整体赋值</li><li>char s[8],表示s是一个不可修改的左值，s实际上是char *const s 类型的值</li></ol><h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><ol><li>KMP算法的特点是在模式匹配时指示主串的指针不会变小</li><li>KMP算法最大的特点就是指示主串的指针不需要回溯，因此指针不可能变小</li></ol><h1 id="NEXT数组"><a href="#NEXT数组" class="headerlink" title="NEXT数组"></a>NEXT数组</h1><p>串′ababaaababaa′的next数组为(011234223456)</p><p>第一种方法：</p><ol><li>next数组的求解方法是：第一位的next值为0，第二位的next值为1，后面求解每一位的next值时，根据前一位进行比较。</li><li>首先将前一位与其next值对应的内容进行比较，如果相等，则该位的next值就是前一位的next值加上1；</li><li>如果不等，向前继续寻找next值对应的内容来与前一位进行比较，直到找到某个位上内容的next值对应的内容与前一位相等为止，则这个位对应的值加上1即为需求的next值；</li><li>如果找到第一位都没有找到与前一位相等的内容，那么需求的位上的next值即为1。</li></ol><p>第二种解释：<br>next数组下标从1开始计算<br>next[1] 肯定是 0<br>next[2] 肯定是 1<br>next[n] 的情况，将前面n-1个字符，计算从首尾开始组成最大的相同子串的长度，如果找到，那么next值是该长度加1，否则next值是1。</p><p>举例<br>next[6]的计算，字符串第六位是 a ，( ababa a ababaa)<br>将前面的5个字符，从头尾开始取4个组成子串比较，如果不相等，则从首尾取3个字符组成子串继续比较，并以此类推， 如果一直比较到最后一个字符都不相等，那么该next值为1。<br>4个字符的情况：abab : baba<br>3个字符的情况：aba   :  aba  此时相等，那么next[6] = 3+1 = 4</p><p>第三种（在看不懂我就没办法了）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">     i     0    1    2    3    4    5   6   7    8   9   10   11</span><br><span class="line">     s     a    b    a    b    a    a   a   b    a    b   a    a  </span><br><span class="line">next[i]   -1    0    0   1     2    3   1   1    2    3   4    5</span><br></pre></td></tr></table></figure><ol><li>先计算前缀next[i]的值： （字符串匹配是 从头开始的 和 从尾开始的字符串进行匹配是否重复 ）</li><li>next[i]的值主要是看s[i]之前的字符串中重复的子串长度。next[0] = -1，定值。  </li><li>next[1]是看s[1]之前的字符串“a”中重复的子串长度为0，故next[1] = 0。</li><li>next[2]是看s[2]之前的字符串“ab”中重复的子串长度为0，故next[2] = 0。</li><li>next[3]是看s[3]之前的字符串”aba”中重复的子串长度，s[0]与s[2]重复，长度为1，故next[3] = 1。</li><li>next[4]是看s[4]之前的字符串”abab”中重复的子串长度，s[01]与s[23]重复，长度为2，故next[4] = 2。</li><li>next[5]是看s[5]之前的字符串”ababa”中重复的子串长度，s[012]与s[234]重复，长度为3，故next[5] = 3。</li><li>next[6]是看s[6]之前的字符串”ababaa”中重复的子串长度，s[0]与s[5]重复(因为多了一个a，无法找到长度为3的重复字符串，这只能是s[0]和s[5]重复)，长度为1，故next[6] = 1。</li><li>同样的，求next[7]和next[8]、next[9]、 next[10]、 next[11] 分别为1和2、3、4、5。</li></ol><h1 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">char *myString()</span><br><span class="line">&#123;</span><br><span class="line">    char buffer[6] = &#123;0&#125;;</span><br><span class="line">    char *s = &quot;Hello World!&quot;;</span><br><span class="line">    for (int i = 0; i &lt; sizeof(buffer) - 1; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        buffer[i] = *(s + i);</span><br><span class="line">    &#125;</span><br><span class="line">    return buffer;</span><br><span class="line">&#125;</span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;%s\n&quot;, myString());</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果？</p><ol><li>函数char *myString()中没有使用new或者malloc分配内存，所有buffer数组的内存区域在栈区</li><li>随着char *myString()的结束，栈区内存释放，字符数组也就不存在了，所以会产生野指针，输出结果未知 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h1&gt;&lt;p&gt;设字符串S=’ABCDEFG’,T=’PQRST’,则运算CONCAT(SUBSTR(S,2，LENGTH(T),SUBSTR(S,
      
    
    </summary>
    
      <category term="数据结构" scheme="http://berryk.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://berryk.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://berryk.top/tags/%E5%A0%86/"/>
    
      <category term="栈" scheme="http://berryk.top/tags/%E6%A0%88/"/>
    
      <category term="图" scheme="http://berryk.top/tags/%E5%9B%BE/"/>
    
      <category term="树" scheme="http://berryk.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>机器学习笔记（四）：AdaBoost算法 Boosting和Bagging等</title>
    <link href="http://berryk.top/archives/919c217.html"/>
    <id>http://berryk.top/archives/919c217.html</id>
    <published>2018-01-27T16:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h1><p>以下关于SVM说法正确的是（）<br>A.L2正则项，作用是最大化分类间隔，使得分类器拥有更强的泛化能力<br>B.Hinge 损失函数，作用是最小化经验分类错误<br>C.分类间隔为1/||w||，||w||代表向量的模<br>D.当参数C越小时，分类间隔越大，分类错误越多，趋于欠学习</p><p>(1). 考虑加入正则化项的原因：想象一个完美的数据集，y&gt;1是正类，y&lt;-1是负类，决策面y=0，加入一个y=-30的正类噪声样本，那么决策面将会变“歪”很多，分类间隔变小，泛化能力减小。A正确。</p><p>(2). 加入正则项之后，对噪声样本的容错能力增强，前面提到的例子里面，决策面就会没那么“歪”了，使得分类间隔变大，提高了泛化能力。 B正确。 </p><p>(3). C错误。间隔应该是2/||w||才对，后半句应该没错，向量的模通常指的就是其二范数。 </p><p>(4). D正确。考虑软间隔的时候，C对优化问题的影响就在于把a的范围从[0，+inf]限制到了[0,C]。C越小，那么a就会越小，目标函数拉格朗日函数导数为0可以求出w=求和a_i<em>y_i</em>x_i，a变小使得w变小，因此间隔2/||w||变大</p><h1 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h1><p>在其他条件不变的前提下，以下哪种做法容易引起机器学习中的过拟合问题（）<br>A.增加训练集量<br>B.减少神经网络隐藏层节点数<br>C.删除稀疏的特征S<br>D.SVM算法中使用高斯核/RBF核代替线性核</p><p>(1). 一般认为，增加隐层数可以降低网络误差（也有文献认为不一定能有效降低），提高精度，但也使网络复杂化，从而增加了网络的训练时间和出现“过拟合”的倾向， </p><p>(2). 引起过拟合的应该是太多的参数引起的。神经网络减少隐藏层节点，就是在减少参数啊，只会将训练误差变高，怎么会过拟合呢。 B错误。 </p><p>(3). 径向基(RBF)核函数/高斯核函数的说明</p><p>a. 这个核函数可以将原始空间映射到无穷维空间。</p><p>b. 对于参数 ，如果选的很大，高次特征上的权重实际上衰减得非常快，实际上（数值上近似一下）相当于一个低维的子空间；反过来，如果选得很小，则可以将任意的数据映射为线性可分——当然，这并不一定是好事，因为随之而来的可能是非常严重的过拟合问题。</p><p>c. 不过，总的来说，通过调整参数 ，高斯核实际上具有相当高的灵活性，也是 使用最广泛的核函数 之一。 </p><p>(4). D正确。SVM高斯核函数比线性核函数模型更复杂，容易过拟合。</p><hr><h1 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h1><p>数据清理中，处理缺失值的方法有两种：</p><ol><li><p>删除法：</p><pre><code>1）删除观察样本2）删除变量：当某个变量缺失值较多且对研究目标影响不大时，可以将整个变量整体删除3）使用完整原始数据分析：当数据存在较多缺失而其原始数据完整时，可以使用原始数据替代现有数据进行分析4）改变权重：当删除缺失数据会改变数据结构时，通过对完整数据按照不同的权重进行加权，可以降低删除缺失数据带来的偏差</code></pre></li><li><p>查补法：均值插补、回归插补、抽样填补等<br>成对删除与改变权重为一类<br>估算与查补法为一类</p></li><li><p>由于调查、编码和录入误差，数据中可能存在一些无效值和缺失值，需要给予适当的处理。常用的处理方法有：估算，整例删除，变量删除和成对删除。</p></li></ol><p>估算(estimation)。最简单的办法就是用某个变量的样本均值、中位数或众数代替无效值和缺失值。这种办法简单，但没有充分考虑数据中已有的信息，误差可能较大。另一种办法就是根据调查对象对其他问题的答案，通过变量之间的相关分析或逻辑推论进行估计。例如，某一产品的拥有情况可能与家庭收入有关，可以根据调查对象的家庭收入推算拥有这一产品的可能性。</p><p>整例删除(casewise deletion)是剔除含有缺失值的样本。由于很多问卷都可能存在缺失值，这种做法的结果可能导致有效样本量大大减少，无法充分利用已经收集到的数据。因此，只适合关键变量缺失，或者含有无效值或缺失值的样本比重很小的情况。</p><p>变量删除(variable deletion)。如果某一变量的无效值和缺失值很多，而且该变量对于所研究的问题不是特别重要，则可以考虑将该变量删除。这种做法减少了供分析用的变量数目，但没有改变样本量。</p><p>成对删除(pairwise deletion)是用一个特殊码(通常是9、99、999等)代表无效值和缺失值，同时保留数据集中的全部变量和样本。但是，在具体计算时只采用有完整答案的样本，因而不同的分析因涉及的变量不同，其有效样本量也会有所不同。这是一种保守的处理方法，最大限度地保留了数据集中的可用信息。</p><p>采用不同的处理方法可能对分析结果产生影响，尤其是当缺失值的出现并非随机且变量之间明显相关时。因此，在调查中应当尽量避免出现无效值和缺失值，保证数据的完整性。</p><h1 id="分支定界法"><a href="#分支定界法" class="headerlink" title="分支定界法"></a>分支定界法</h1><ol><li><p>分支定界法（branch and bound）是一种求解 整数规划 问题的最常用算法。</p></li><li><p>这种方法不但可以求解纯整数规划，还可以求解混合整数规划问题。</p></li><li><p>分支定界法是计算机最擅长 的广义搜索穷举算法。</p></li><li><p>分支定界法是一种搜索与迭代的方法，选择不同的分支变量和子问题进行分支。</p></li><li><p>对于两个变量的整数规划问题，使用网格的方法有时更为简单。</p></li><li><p>分支定界法类似决策树的决策特征，要选择那些具有强可分辨性的少量特征。</p></li></ol><h1 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h1><p>关于线性回归的描述,以下正确的有:2,3,5</p><ol><li>基本假设包括随机干扰项是均值为0,方差为1的标准正态分布</li><li>基本假设包括随机干扰项是均值为0的同方差正态分布</li><li>在违背基本假设时,普通最小二乘法估计量不再是最佳线性无偏估计量</li><li>在违背基本假设时,模型不再可以估计</li><li>可以用DW检验残差是否存在序列相关性</li><li>多重共线性会使得参数估计值方差减小</li></ol><p>一元线性回归的基本假设有:</p><ol><li>随机误差项是一个期望值或平均值为0的随机变量； </li><li>对于解释变量的所有观测值，随机误差项有相同的方差； </li><li>随机误差项彼此不相关；</li><li>解释变量是确定性变量，不是随机变量，与随机误差项彼此之间相互独立；</li><li>解释变量之间不存在精确的（完全的）线性关系，即解释变量的样本观测值矩阵是满秩矩阵；</li><li>随机误差项服从正态分布</li></ol><p>注意：</p><ol><li><p>违背基本假设的计量经济学模型还是可以估计的，只是不能使用普通最小二乘法进行估计。 </p></li><li><p>当存在异方差时，普通最小二乘法估计存在以下问题： </p></li><li><p>参数估计值虽然是无偏的，但不是最小方差线性无偏估计。</p></li><li><p>杜宾-瓦特森（DW）检验，计量经济，统计分析中常用的一种检验序列一阶 自相关 最常用的方法。 </p></li><li><p>所谓多重共线性（Multicollinearity）是指线性回归模型中的解释变量之间由于存在精确相关关系或高度相关关系而使模型估计失真或难以估计准确。影响</p></li></ol><p>（1）完全共线性下参数估计量不存在</p><p>（2）近似共线性下OLS估计量非有效</p><p>多重共线性使参数估计值的方差增大，1/(1-r2)为方差膨胀因子(Variance Inflation Factor, VIF)</p><p>（3）参数估计量经济含义不合理</p><p>（4）变量的显著性检验失去意义，可能将重要的解释变量排除在模型之外</p><p>（5）模型的预测功能失效。变大的方差容易使区间预测的“区间”变大，使预测失去意义。</p><h1 id="SVM-AdaBoost算法-Boosting和Bagging"><a href="#SVM-AdaBoost算法-Boosting和Bagging" class="headerlink" title="SVM AdaBoost算法 Boosting和Bagging"></a>SVM AdaBoost算法 Boosting和Bagging</h1><p>以下说法中正确的是(BD)<br>A.SVM对噪声(如来自其他分布的噪声样本)鲁棒<br>B.在AdaBoost算法中,所有被分错的样本的权重更新比例相同<br>C.Boosting和Bagging都是组合多个分类器投票的方法,二者都是根据单个分类器的正确率决定其权重<br>D.给定n个数据点,如果其中一半用于训练,一般用于测试,则训练误差和测试误差之间的差别会随着n的增加而减少</p><p>Adaboost目的是从训练数据中学习一系列弱分类器，然后将其按一定权重累加起来得到强分类器。<br>刚开始每个样本对应的权重是相等的，在此样本分布下训练一个基本分类器c1.对于c1错分的样本增加其权重，对正确分类的样本降低其权重。这样使得错分的样本突出出来，并得到一个新的样本分布。同时根据分类情况赋予c1一个权重，表示其重要程度，分类正确率越高权重越大。然后在新的样本分布下对分类器进行训练，得到c2及其权重。依此类推，得到M个基本分类器及其权重。将这些弱分类器按照权重累加起来就是所期望的强分类器。（B对）</p><p>Bagging是对训练样本多次抽样训练多个分类器，然后对测试集进行投票所得到的优胜结果就是最终的分类结果。在投票时每个分类器的权重是相等的。（所以C错）</p><ol><li><p>SVM对噪声（如来自其他分布的噪声样本）鲁棒。SVM本身对噪声具有一定的鲁棒性，但实验证明，是当噪声率低于一定水平的噪声对SVM没有太大影响，但随着噪声率的不断增加，分类器的识别率会降低。</p></li><li><p>在AdaBoost算法中所有被分错的样本的权重更新比例相同。AdaBoost算法中不同的训练集是通过调整每个样本对应的权重来实现的。开始时，每个样本对应的权重是相同的，即其中n为样本个数，在此样本分布下训练出一弱分类器。对于分类错误的样本，加大其对应的权重；而对于分类正确的样本，降低其权重，这样分错的样本就被凸显出来，从而得到一个新的样本分布。在新的样本分布下，再次对样本进行训练，得到弱分类器。以此类推，将所有的弱分类器重叠加起来，得到强分类器。</p></li><li><p>Boost和Bagging都是组合多个分类器投票的方法，二者均是根据单个分类器正确率决定其权重。</p></li></ol><p>Bagging与Boosting的区别：取样方式不同。</p><p>Bagging采用均匀取样，而Boosting根据错误率取样。</p><p>Bagging的各个预测函数没有权重，而Boosting是由权重的，Bagging的各个预测函数可以并行生成，而Boosing的哥哥预测函数只能顺序生成。</p><h1 id="判别式模型与生成式模型"><a href="#判别式模型与生成式模型" class="headerlink" title="判别式模型与生成式模型"></a>判别式模型与生成式模型</h1><p>生成式模型(Generative Model)与判别式模型(Discrimitive Model)是分类器常遇到的概念，它们的区别在于：（对于输入x，类别标签y）</p><ol><li><p>生成式模型估计它们的联合概率分布P(x,y)</p></li><li><p>判别式模型估计决策函数F(X)或条件概率分布P(y|x)</p></li><li><p>生成式式模型可以根据贝叶斯公式得到判别式模型，但反过来不行</p></li></ol><h2 id="生成式模型"><a href="#生成式模型" class="headerlink" title="生成式模型"></a>生成式模型</h2><ol><li>判别式分析</li><li>朴素贝叶斯Native Bayes</li><li>混合高斯型Gaussians</li><li>K近邻KNN</li><li>隐马尔科夫模型HMM</li><li>贝叶斯网络</li><li>sigmoid belief networks</li><li>马尔科夫随机场Markov random fields</li><li>深度信念网络DBN</li><li>隐含狄利克雷分布简称LDA(Latent Dirichlet allocation)</li><li>多专家模型（the mixture of experts model）</li></ol><h2 id="判别式模型"><a href="#判别式模型" class="headerlink" title="判别式模型"></a>判别式模型</h2><ol><li>线性回归linear regression</li><li>逻辑回归logic regression</li><li>神经网络NN</li><li>支持向量机SVM</li><li>高斯过程Gaussian process</li><li>条件随机场CRF</li><li>CART(Classification and regression tree)</li><li>Boosting</li></ol><h1 id="线性分类器"><a href="#线性分类器" class="headerlink" title="线性分类器"></a>线性分类器</h1><p>线性分类器有三大类：感知器准则函数、SVM、Fisher准则，而贝叶斯分类器不是线性分类器。</p><ol><li><p>感知器准则函数：代价函数J=-(W*X+w0).分类的准则是最小化代价函数。感知器是神经网络（NN）的基础，网上有很多介绍。</p></li><li><p>SVM：支持向量机也是很经典的算法，优化目标是最大化间隔（margin），又称最大间隔分类器，是一种典型的线性分类器。（使用核函数可解决非线性问题）</p></li><li><p>Fisher准则：更广泛的称呼是线性判别分析（LDA），将所有样本投影到一条远点出发的直线，使得同类样本距离尽可能小，不同类样本距离尽可能大，具体为最大化“广义瑞利商”。</p></li><li><p>贝叶斯分类器：一种基于统计方法的分类器，要求先了解样本的分布特点（高斯、指数等），所以使用起来限制很多。在满足一些特定条件下，其优化目标与线性分类器有相同结构（同方差高斯分布等），其余条件下不是线性分类。</p></li></ol><h2 id="分类问题"><a href="#分类问题" class="headerlink" title="分类问题"></a>分类问题</h2><p>在分类问题中,我们经常会遇到正负样本数据量不等的情况,比如正样本为10w条数据,负样本只有1w条数据,以下最合适的处理方法是()<br>A.将负样本重复10次,生成10w样本量,打乱顺序参与分类<br>B.直接进行分类,可以最大限度利用数据<br>C.从10w正样本中随机抽取1w参与分类<br>D.将负样本每个权重设置为10,正样本权重为1,参与训练过程</p><p>解决这类问题主要分：</p><ol><li><p>重采样。A可视作重采样的变形。改变数据分布消除不平衡，可能导致过拟合。</p></li><li><p>欠采样。C的方案 提高少数类的分类性能，可能丢失多数类的重要信息。</p></li><li><p>权值调整。</p></li></ol><p>如果1：10算是均匀的话，可以将多数类分割成为1000份。然后将每一份跟少数类的样本组合进行训练得到分类器。而后将这1000个分类器用assemble的方法组合位一个分类器。A选项可以看作此方式，因而相对比较合理。</p><p>另：如果目标是 预测的分布 跟训练的分布一致，那就加大对分布不一致的惩罚系数。</p><p>D方案也是其中一种方式。</p><h2 id="类域界面方程法"><a href="#类域界面方程法" class="headerlink" title="类域界面方程法"></a>类域界面方程法</h2><p>类域界面方程法中，不能求线性不可分情况下分类问题近似或精确解的方法是？<br>A.伪逆法<br>B.感知器算法<br>C.基于二次准则的H-K算法<br>D.势函数法</p><p>伪逆法：径向基（RBF）神经网络的训练算法，径向基解决的就是线性不可分的情况。</p><p>感知器算法：线性分类模型。线性不可分时，感知器算法不收敛。</p><p>H-K算法：在最小均方误差准则下求得权矢量，二次准则解决非线性问题。</p><p>基于二次准则函数的H-K算法较之于感知器算法的优点是:可以判别问题是否线性可分,其解的适应性更好.</p><p>势函数法：势函数非线性。</p><h1 id="主分量（主成分）分析PCA"><a href="#主分量（主成分）分析PCA" class="headerlink" title="主分量（主成分）分析PCA"></a>主分量（主成分）分析PCA</h1><p>已知一组数据的协方差矩阵P,下面关于主分量说法错误的是(C)<br>A.主分量分析的最佳准则是对一组数据进行按一组正交基分解, 在只取相同数量分量的条件下,以均方误差计算截尾误差最小<br>B.在经主分量分解后,协方差矩阵成为对角矩阵<br>C.主分量分析就是K-L变换<br>D.主分量是通过求协方差矩阵的特征值得到</p><p>K-L变换与PCA变换是不同的概念</p><p>PCA的变换矩阵是协方差矩阵</p><p>K-L变换的变换矩阵可以有很多种（二阶矩阵、协方差矩阵、总类内离散度矩阵等等）</p><p>当K-L变换矩阵为协方差矩阵时，等同于PCA。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SVM&quot;&gt;&lt;a href=&quot;#SVM&quot; class=&quot;headerlink&quot; title=&quot;SVM&quot;&gt;&lt;/a&gt;SVM&lt;/h1&gt;&lt;p&gt;以下关于SVM说法正确的是（）&lt;br&gt;A.L2正则项，作用是最大化分类间隔，使得分类器拥有更强的泛化能力&lt;br&gt;B.Hinge 损失
      
    
    </summary>
    
      <category term="机器学习" scheme="http://berryk.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>机器学习笔记（三）：SVM核函数等</title>
    <link href="http://berryk.top/archives/8823626c.html"/>
    <id>http://berryk.top/archives/8823626c.html</id>
    <published>2018-01-25T17:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SVM"><a href="#SVM" class="headerlink" title="SVM"></a>SVM</h1><h2 id="SVM核函数包括："><a href="#SVM核函数包括：" class="headerlink" title="SVM核函数包括："></a>SVM核函数包括：</h2><ol><li>线性核函数、</li><li>多项式核函数、</li><li>径向基核函数、</li><li>高斯核函数、</li><li>幂指数核函数、</li><li>拉普拉斯核函数、</li><li>ANOVA核函数、</li><li>二次有理核函数、</li><li>多元二次核函数、</li><li>逆多元二次核函数</li><li>Sigmoid核函数</li></ol><p>支持向量机是建立在统计学习理论基础之上的新一代机器学习算法，支持向量机的优势主要体现在解决线性不可分问题，它通过引入核函数，巧妙地解决了在高维空间中的内积运算，从而很好地解决了非线性分类问题。</p><p>构造出一个具有良好性能的SVM，核函数的选择是关键．核函数的选择包括两部分工作：<br>一是核函数类型的选择，<br>二是确定核函数类型后相关参数的选择．</p><p>因此如何根据具体的数据选择恰当的核函数是SVM应用领域遇到的一个重大难题，也成为科研工作者所关注的焦点，即便如此，却依然没有得到具体的理论或方法来指导核函数的选取．</p><h2 id="1、经常使用的核函数"><a href="#1、经常使用的核函数" class="headerlink" title="1、经常使用的核函数"></a>1、经常使用的核函数</h2><p>核函数的定义并不困难，根据泛函的有关理论，只要一种函数 K ( x i , x j ) 满足Mercer条件，它就对应某一变换空间的内积．对于判断哪些函数是核函数到目前为止也取得了重要的突破，得到Mercer定理和以下常用的核函数类型：</p><p>(1)线性核函数<br> K ( x , x i ) = x ⋅ x i </p><p>(2)多项式核<br> K ( x , x i ) = ( ( x ⋅ x i ) + 1 ) d </p><p>(3)径向基核（RBF）<br> K ( x , x i ) = exp ( − ∥ x − x i ∥ 2 σ 2 ) </p><p>Gauss径向基函数则是局部性强的核函数，其外推能力随着参数 σ 的增大而减弱。多项式形式的核函数具有良好的全局性质。局部性较差。</p><p>(4)傅里叶核<br> K ( x , x i ) = 1 − q 2 2 ( 1 − 2 q cos ( x − x i ) + q 2 ) </p><p>(5)样条核<br> K ( x , x i ) = B 2 n + 1 ( x − x i ) </p><p>(6)Sigmoid核函数<br> K ( x , x i ) = tanh ( κ ( x , x i ) − δ ) </p><p>采用Sigmoid函数作为核函数时，支持向量机实现的就是一种多层感知器神经网络，应用SVM方法，隐含层节点数目(它确定神经网络的结构)、隐含层节点对输入节点的权值都是在设计(训练)的过程中自动确定的。而且支持向量机的理论基础决定了它最终求得的是全局最优值而不是局部最小值，也保证了它对于未知样本的良好泛化能力而不会出现过学习现象。</p><h2 id="2、核函数的选择"><a href="#2、核函数的选择" class="headerlink" title="2、核函数的选择"></a>2、核函数的选择</h2><p>在选取核函数解决实际问题时，通常采用的方法有：</p><p>一是利用专家的先验知识预先选定核函数；</p><p>二是采用Cross-Validation方法，即在进行核函数选取时，分别试用不同的核函数，归纳误差最小的核函数就是最好的核函数．如针对傅立叶核、RBF核，结合信号处理问题中的函数回归问题，通过仿真实验，对比分析了在相同数据条件下，采用傅立叶核的SVM要比采用RBF核的SVM误差小很多;</p><p>三是采用由Smits等人提出的混合核函数方法，该方法较之前两者是目前选取核函数的主流方法，也是关于如何构造核函数的又一开创性的工作．将不同的核函数结合起来后会有更好的特性，这是混合核函数方法的基本思想．</p><hr><h1 id="HMM"><a href="#HMM" class="headerlink" title="HMM"></a>HMM</h1><p>Q:如果已知观察序列和产生观察序列的状态序列,那么可用以下哪种方法直接进行参数估计(D)<br>A.EM算法<br>B.维特比算法<br>C.前向后向算法<br>D.极大似然估计</p><ol><li><p>EM算法： 只有观测序列，无状态序列时来学习模型参数，即Baum-Welch算法</p></li><li><p>维特比算法： 用动态规划解决HMM的预测问题，不是参数估计</p></li></ol><p>维特比算法解决的是给定 一个模型和某个特定的输出序列，求最可能产生这个输出的状态序列。如通过海藻变化（输出序列）来观测天气（状态序列），是预测问题，通信中的解码问题 Baum-Welch算法解决的是一个模型训练问题，即参数估计，是一种无监督的训练方法，主要通过EM迭代实现；</p><ol><li><p>前向后向：用来算概率</p></li><li><p>极大似然估计：即观测序列和相应的状态序列都存在时的监督学习算法，用来估计参数</p></li></ol><p>在给定观测序列和对应的状态序列估计模型参数，可以利用极大似然发估计。</p><p>如果给定观测序列，没有对应的状态序列，才用EM，将状态序列看不不可测的隐数据</p><h1 id="特征提取算法"><a href="#特征提取算法" class="headerlink" title="特征提取算法"></a>特征提取算法</h1><p>特征提取算法分为特征选择和特征抽取两大类</p><h2 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h2><p>常采用特征选择方法。常见的六种特征选择方法：</p><ol><li><p>DF(Document Frequency) 文档频率<br>DF:统计特征词出现的文档数量，用来衡量某个特征词的重要性</p></li><li><p>MI(Mutual Information) 互信息法<br>互信息法用于衡量特征词与文档类别直接的信息量。<br>如果某个特征词的频率很低，那么互信息得分就会很大，因此互信息法倾向”低频”的特征词。<br>相对的词频很高的词，得分就会变低，如果这词携带了很高的信息量，互信息法就会变得低效。</p></li><li><p>(Information Gain) 信息增益法<br>通过某个特征词的缺失与存在的两种情况下，语料中前后信息的增加，衡量某个特征词的重要性。</p></li><li><p>CHI(Chi-square) 卡方检验法<br>利用了统计学中的”假设检验”的基本思想：首先假设特征词与类别直接是不相关的<br>如果利用CHI分布计算出的检验值偏离阈值越大，那么更有信心否定原假设，接受原假设的备则假设：特征词与类别有着很高的关联度。</p></li><li><p>WLLR(Weighted Log Likelihood Ration)加权对数似然</p></li><li><p>WFO（Weighted Frequency and Odds）加权频率和可能性</p></li></ol><h2 id="特征抽取（降维）"><a href="#特征抽取（降维）" class="headerlink" title="特征抽取（降维）"></a>特征抽取（降维）</h2><p> PCA</p><h1 id="logit-回归和-SVM"><a href="#logit-回归和-SVM" class="headerlink" title="logit 回归和 SVM"></a>logit 回归和 SVM</h1><p>关于 logit 回归和 SVM 不正确的是（A）</p><p>A.Logit回归目标函数是最小化后验概率<br>B.Logit回归可以用于预测事件发生概率的大小<br>C.SVM目标是结构风险最小化<br>D.SVM可以有效避免模型过拟合</p><p>A. Logit回归本质上是一种根据样本对权值进行极大似然估计的方法，而后验概率正比于先验概率和似然函数的乘积。logit仅仅是最大化似然函数，并没有最大化后验概率，更谈不上最小化后验概率。A错误 </p><p>B. Logit回归的输出就是样本属于正类别的几率，可以计算出概率，正确 </p><p>C. SVM的目标是找到使得训练数据尽可能分开且分类间隔最大的超平面，应该属于结构风险最小化，严格来说也是错误的。</p><p> D. SVM可以通过正则化系数控制模型的复杂度，避免过拟合。</p><h1 id="L0范数与L1范数，L2范数"><a href="#L0范数与L1范数，L2范数" class="headerlink" title="L0范数与L1范数，L2范数"></a>L0范数与L1范数，L2范数</h1><h2 id="L0范数"><a href="#L0范数" class="headerlink" title="L0范数"></a>L0范数</h2><p>L0范数是指向量中非0的元素的个数。</p><p>如果我们用L0范数来规则化一个参数矩阵W的话，就是希望W的大部分元素都是0。这太直观了，太露骨了吧，换句话说，让参数W是稀疏的。OK，看到了“稀疏”二字，大家都应该从当下风风火火的“压缩感知”和“稀疏编码”中醒悟过来，原来用的漫山遍野的“稀疏”就是通过这玩意来实现的。</p><p>但你又开始怀疑了，是这样吗？看到的papers世界中，稀疏不是都通过L1范数来实现吗？脑海里是不是到处都是||W||1影子呀！几乎是抬头不见低头见。没错，这就是这节的题目把L0和L1放在一起的原因，因为他们有着某种不寻常的关系。那我们再来看看L1范数是什么？它为什么可以实现稀疏？为什么大家都用L1范数去实现稀疏，而不是L0范数呢？</p><h2 id="L1范数"><a href="#L1范数" class="headerlink" title="L1范数"></a>L1范数</h2><p>L1范数是指向量中各个元素绝对值之和，也有个美称叫“稀疏规则算子”（Lasso regularization）。</p><p>现在我们来分析下这个价值一个亿的问题：为什么L1范数会使权值稀疏？有人可能会这样给你回答“它是L0范数的最优凸近似”。</p><p>实际上，还存在一个更美的回答：任何的规则化算子，如果他在Wi=0的地方不可微，并且可以分解为一个“求和”的形式，那么这个规则化算子就可以实现稀疏。</p><p>这说是这么说，W的L1范数是绝对值，|w|在w=0处是不可微，但这还是不够直观。这里因为我们需要和L2范数进行对比分析。所以关于L1范数的直观理解，请待会看看第二节。</p><p>对了，上面还有一个问题：既然L0可以实现稀疏，为什么不用L0，而要用L1呢？个人理解</p><p>一是因为L0范数很难优化求解（NP难问题）<br>二是L1范数是L0范数的最优凸近似，而且它比L0范数要容易优化求解。<br>所以大家才把目光和万千宠爱转于L1范数。</p><p>一句话总结：L1范数和L0范数可以实现稀疏，L1因具有比L0更好的优化求解特性而被广泛应用。</p><h1 id="为什么要稀疏？"><a href="#为什么要稀疏？" class="headerlink" title="为什么要稀疏？"></a>为什么要稀疏？</h1><p>让我们的参数稀疏有什么好处呢？这里扯两点：</p><ol><li>特征选择(Feature Selection)：</li></ol><p>大家对稀疏规则化趋之若鹜的一个关键原因在于它能实现特征的自动选择。</p><p>一般来说，xi的大部分元素（也就是特征）都是和最终的输出yi没有关系或者不提供任何信息的，在最小化目标函数的时候考虑xi这些额外的特征，虽然可以获得更小的训练误差，但在预测新的样本时，这些没用的信息反而会被考虑，从而干扰了对正确yi的预测。</p><p>稀疏规则化算子的引入就是为了完成特征自动选择的光荣使命，它会学习地去掉这些没有信息的特征，也就是把这些特征对应的权重置为0。</p><ol><li>可解释性(Interpretability)：</li></ol><p>另一个青睐于稀疏的理由是，模型更容易解释。</p><p>例如患某种病的概率是y，然后我们收集到的数据x是1000维的，也就是我们需要寻找这1000种因素到底是怎么影响患上这种病的概率的。</p><p>假设我们这个是个回归模型： y=w1<em>x1+w2</em>x2+…+w1000*x1000+b （当然了，为了让y限定在[0,1]的范围，一般还得加个Logistic函数）。</p><p>通过学习，如果最后学习到的w*就只有很少的非零元素，例如只有5个非零的wi，那么我们就有理由相信，这些对应的特征在患病分析上面提供的信息是巨大的，决策性的。也就是说，患不患这种病只和这5个因素有关，那医生就好分析多了。但如果1000个wi都非0，医生面对这1000种因素，累觉不爱。</p><h2 id="L2范数"><a href="#L2范数" class="headerlink" title="L2范数"></a>L2范数</h2><p>除了L1范数，还有一种更受宠幸的规则化范数是L2范数: ||W||2。它也不逊于L1范数，它有两个美称，在回归里面，有人把有它的回归叫“岭回归”（Ridge Regression），有人也叫它“权值衰减weight decay”。</p><p>这用的很多吧，因为它的强大功效是改善机器学习里面一个非常重要的问题：过拟合。</p><p>至于过拟合是什么，上面也解释了，就是模型训练时候的误差很小，但在测试的时候误差很大，也就是我们的模型复杂到可以拟合到我们的所有训练样本了，但在实际预测新的样本的时候，糟糕的一塌糊涂。</p><p>通俗的讲就是应试能力很强，实际应用能力很差。擅长背诵知识，却不懂得灵活利用知识。</p><ol><li><p>L2范数是指向量各元素的平方和然后求平方根。我们让L2范数的规则项||W||2最小，可以使得W的每个元素都很小，都接近于0，但与L1范数不同，它不会让它等于0，而是接近于0，这里是有很大的区别的哦。</p></li><li><p>而越小的参数说明模型越简单，越简单的模型则越不容易产生过拟合现象。为什么越小的参数说明模型越简单？</p></li><li><p>我也不懂，我的理解是：限制了参数很小，实际上就限制了多项式某些分量的影响很小（看上面线性回归的模型的那个拟合的图），这样就相当于减少参数个数。其实我也不太懂，希望大家可以指点下。</p></li></ol><p>一句话总结下：通过L2范数，我们可以实现了对模型空间的限制，从而在一定程度上避免了过拟合。</p><h2 id="L2范数的好处是什么呢？这里也扯上两点："><a href="#L2范数的好处是什么呢？这里也扯上两点：" class="headerlink" title="L2范数的好处是什么呢？这里也扯上两点："></a>L2范数的好处是什么呢？这里也扯上两点：</h2><p>1）学习理论的角度：</p><p>从学习理论的角度来说，L2范数可以防止过拟合，提升模型的泛化能力。</p><p>2）优化计算的角度：</p><p>从优化或者数值计算的角度来说，L2范数有助于处理 condition number不好的情况下矩阵求逆很困难的问题。哎，等等，这condition number是啥？我先google一下哈。</p><p>这里我们也故作高雅的来聊聊优化问题。优化有两大难题，<br>一是：局部最小值，<br>二是：ill-condition病态问题。</p><p>前者俺就不说了，大家都懂吧，我们要找的是全局最小值，如果局部最小值太多，那我们的优化算法就很容易陷入局部最小而不能自拔，这很明显不是观众愿意看到的剧情。</p><p>那下面我们来聊聊ill-condition。ill-condition对应的是well-condition。那他们分别代表什么？假设我们有个方程组AX=b，我们需要求解X。如果A或者b稍微的改变，会使得X的解发生很大的改变，那么这个方程组系统就是ill-condition的，反之就是well-condition的。</p><p>一句话总结：conditionnumber是一个矩阵（或者它所描述的线性系统）的稳定性或者敏感度的度量，如果一个矩阵的condition number在1附近，那么它就是well-conditioned的，如果远大于1，那么它就是ill-conditioned的，如果一个系统是ill-conditioned的，它的输出结果就不要太相信了。</p><p>从优化或者数值计算的角度来说，L2范数有助于处理 condition number不好的情况下矩阵求逆很困难的问题。</p><p>总结吧：L2范数不但可以防止过拟合，还可以让我们的优化求解变得稳定和快速。</p><h1 id="L1和L2的差别"><a href="#L1和L2的差别" class="headerlink" title="L1和L2的差别"></a>L1和L2的差别</h1><p>为什么一个让绝对值最小，一个让平方最小，会有那么大的差别呢？我看到的有两种几何上直观的解析：</p><ol><li><p>下降速度：</p><p>我们知道，L1和L2都是规则化的方式，我们将权值参数以L1或者L2的方式放到代价函数里面去。然后模型就会尝试去最小化这些权值参数。而这个最小化就像一个下坡的   过程，L1和L2的差别就在于这个“坡”不同，如下图：L1就是按绝对值函数的“坡”下降的，而L2是按二次函数的“坡”下降。所以实际上在0附近，L1的下降速度比L2的下   降速度要快。所以会非常快得降到0。不过我觉得这里解释的不太中肯，当然了也不知道是不是自己理解的问题。</p></li><li><p>模型空间的限制：</p><p>实际上，对于L1和L2规则化的代价函数来说，也就是说，我们将模型空间限制在w的一个L1-ball 中。为了便于可视化，我们考虑两维的情况，在(w1, w2)平面上可以 画出目标函数的等高线，而约束条件则成为平面上半径为C的一个 norm ball 。等高线与 norm ball 首次相交的地方就是最优解</p></li></ol><p>一句话总结就是：L1会趋向于产生少量的特征，而其他的特征都是0，而L2会选择更多的特征，这些特征都会接近于0。Lasso在特征选择时候非常有用，而Ridge就只是一种规则化而已。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SVM&quot;&gt;&lt;a href=&quot;#SVM&quot; class=&quot;headerlink&quot; title=&quot;SVM&quot;&gt;&lt;/a&gt;SVM&lt;/h1&gt;&lt;h2 id=&quot;SVM核函数包括：&quot;&gt;&lt;a href=&quot;#SVM核函数包括：&quot; class=&quot;headerlink&quot; title=&quot;SVM
      
    
    </summary>
    
      <category term="机器学习" scheme="http://berryk.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>机器学习笔记（二）：常识性知识</title>
    <link href="http://berryk.top/archives/fe892b9e.html"/>
    <id>http://berryk.top/archives/fe892b9e.html</id>
    <published>2018-01-24T21:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算输出特征图大小"><a href="#计算输出特征图大小" class="headerlink" title="计算输出特征图大小"></a>计算输出特征图大小</h1><p>Q： 输入图片大小为200×200，依次经过一层卷积（kernel size 5×5，padding 1，stride 2），pooling（kernel size 3×3，padding 0，stride 1），又一层卷积（kernel size 3×3，padding 1，stride 1）之后，输出特征图大小为多少？</p><p>公式：输出尺寸=(输入尺寸-filter尺寸+2*padding）/stride+1</p><p>A: 输出为97×97</p><p>1层卷积,输出为99×99：（200-5+2）/2+1=99.5</p><p>池化,输出为97×97： （99-3+0）/1+1=97</p><p>2层卷积,输出为97×97： （97-3+2）/1+1=97</p><ol><li><p>计算尺寸不被整除只在GoogLeNet中遇到过。卷积向下取整，池化向上取整。</p></li><li><p>研究过网络的话看到stride为1的时候，当kernel为 3 padding为1或者kernel为5 padding为2 一看就是卷积前后尺寸不变。</p></li><li><p>计算GoogLeNet全过程的尺寸也一样。</p></li></ol><h1 id="SPSS（Statistical-Product-and-Service-Solutions）"><a href="#SPSS（Statistical-Product-and-Service-Solutions）" class="headerlink" title="SPSS（Statistical Product and Service Solutions）"></a>SPSS（Statistical Product and Service Solutions）</h1><ol><li><p>统计产品与服务解决方案</p></li><li><p>SPSS为IBM公司推出的一系列用于统计学分析运算、数据挖掘、预测分析和决策支持任务的软件产品及相关服务的总称。</p></li><li><p>SPSS是世界上最早采用图形菜单驱动界面的统计软件，它最突出的特点就是操作界面极为友好，输出结果美观漂亮。。</p></li><li><p>SPSS的界面中，主窗口是: 数据编辑窗口。</p></li><li><p>在spss的基础分析模块中，作用是“以行列表的形式揭示数据之间的关系”的是交叉表。</p></li></ol><p>spss中交叉分析主要用来检验两个变量之间是否存在关系，或者说是否独立，其零假设为两个变量之间没有关系。在实际工作中，经常用交叉表来分析比例是否相等。例如分析不同的性别对不同的报纸的选择有什么不同。</p><hr><h1 id="有关过拟合与逻辑回归"><a href="#有关过拟合与逻辑回归" class="headerlink" title="有关过拟合与逻辑回归"></a>有关过拟合与逻辑回归</h1><p>Q: 在Logistic Regression 中,如果同时加入L1和L2范数,会产生什么效果？</p><p>A: 可以做特征选择,并在一定程度上防止过拟合.</p><p>做特征选择看可以使用L1，L2范数，具体如下：</p><ol><li><p>L1范数具有系数解的特性，但是要注意的是，L1没有选到的特征不代表不重要，原因是两个高相关性的特征可能只保留一个。如果需要确定哪个特征重要，再通过交叉验证。</p></li><li><p>在代价函数后面加上正则项，Ｌ１即是Ｌｏｓｓｏ回归，Ｌ２是岭回归.</p></li><li><p>但是它为什么能防止过拟合呢？</p></li></ol><p>奥卡姆剃刀原理：能很好的拟合数据且模型简单</p><p>模型参数在更新时，正则项可使参数的绝对值趋于０，使得部分参数为０，降低了模型的复杂度（模型的复杂度由参数决定），从而防止了过拟合。提高模型的泛化能力.</p><ol><li><p>L1范数是指向量中各个元素绝对值之和，用于特征选择</p></li><li><p>L2范数 是指向量各元素的平方和然后求平方根，用于 防止过拟合，提升模型的泛化能力</p></li></ol><hr><h1 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h1><p>Q: 现在需要计算三个稠密矩阵A,B,C的乘积ABC，假设三个矩阵的尺寸分别为m<em>n,n</em>p,p*q,且m&lt;n&lt;p&lt;q，以下计算顺序效率最高的是：<br>A. A(BC)    B.(AB)C     C.(AC)B     D.所有效率都相同<br>A: B</p><ol><li><p>a<em>b,b</em>c两矩阵相乘效率为a<em>c</em>b<br>ABC=(AB)C=A(BC).<br>(AB)C = m<em>n</em>p + m<em>p</em>q,<br>A(BC)=n<em>p</em>q + m<em>n</em>q.<br>$$m<em>n</em>p&lt;m<em>n</em>q,m<em>p</em>q&lt; n<em>p</em>q$$<br>所以 (AB)C 最小</p></li><li><p>首先，根据简单的矩阵知识，因为 A<em>B ， A 的列数必须和 B 的行数相等。因此，排除C ;<br>然后，再看 A 、 B 选项。在 A 选项中， m</em>n 的矩阵 A 和 n<em>p 的矩阵 B 的乘积，得到 m</em>p 的矩阵 A<em>B ，而 A</em>B 的每个元素需要 n 次乘法和 n-1 次加法，忽略加法，共需要 m<em>n</em>p 次乘法运算。同样情况分析 A<em>B 之后再乘以 C 时的情况，共需要 m</em>p<em>q次乘法运算。因此， A 选项的(AB)C 需要的乘法次数是 m</em>n<em>p+m</em>p<em>q 。同理分析， B 选项的 A (BC)需要的乘法次数是 n</em>p<em>q+m</em>n*q 。</p></li></ol><h1 id="k-NN最近邻方法"><a href="#k-NN最近邻方法" class="headerlink" title="k-NN最近邻方法"></a>k-NN最近邻方法</h1><p>Q: 一般，k-NN最近邻方法在(B)的情况下效果较好<br>A. 样本较多但典型性不好<br>B. 样本较少但典型性好<br>C. 样本呈团状分布<br>D. 样本呈链状分布</p><p>A: 样本呈团状颇有迷惑性，这里应该指的是整个样本都是呈团状分布，这样kNN就发挥不出其求近邻的优势了，整体样本应该具有典型性好，样本较少，比较适宜。</p><p>常见分类方法（监督学习）：k-NN最近邻方法，支持向量机，决策树</p><h1 id="kmeans"><a href="#kmeans" class="headerlink" title="kmeans"></a>kmeans</h1><ol><li><p>Kmeans是聚类方法，典型的无监督学习方法</p></li><li><p>复习一下K-means算法，主要分为赋值阶段和更新阶段。</p></li></ol><p>算法步骤：</p><p>（1）随机选择K个点作为初始的质心</p><p>（2）将每个点指配到最近的质心</p><p>（3）重新计算簇的质心，直到质心不再发生变化。</p><p>K均值容易陷入局部最小值，无法表示类的形状，大小和宽度，是一种硬分类算法，针对它的这些缺点，提出了二分K均值和软K均值</p><h1 id="CRF模型HMM和MEMM模型"><a href="#CRF模型HMM和MEMM模型" class="headerlink" title="CRF模型HMM和MEMM模型"></a>CRF模型HMM和MEMM模型</h1><p>Q: 下列哪个不属于CRF模型对于HMM和MEMM模型的优势(B)<br>A. 特征灵活<br>B. 速度快<br>C. 可容纳较多上下文信息<br>D. 全局最优</p><p>CRF模型:条件随机场（Conditional Random Field，CRF）<br>隐马尔可夫模型（Hidden Markov Model，HMM）<br>最大熵马尔可夫模型（Maximum Entropy Markov Model，MEMM）</p><ol><li><p>CRF没有HMM那样严格的独立性假设条件，因而可以容纳任意的上下文信息。特征设计灵活（与ME一样） -与HMM比较</p></li><li><p>同时，由于CRF计算全局最优输出节点的条件概率，它还克服了最大熵马尔可夫模型标记偏置（Label-bias）的缺点。 ­­——与MEMM比较</p></li><li><p>CRF是在给定需要标记的观察序列的条件下，计算整个标记序列的联合概率分布，而不是在给定当前状态条件下，定义下一个状态的状态分布。—与ME比较</p></li><li><p>缺点：训练代价大、复杂度高</p></li><li><p>CRF 的优点：特征灵活，可以容纳较多的上下文信息，能够做到全局最优<br>CRF 的缺点：速度慢</p></li></ol><h1 id="时间序列模型"><a href="#时间序列模型" class="headerlink" title="时间序列模型"></a>时间序列模型</h1><p>时间序列模型中,哪一个模型可以较好地拟合波动性的分析和预测（D）</p><p>A. AR模型<br>B. MA模型<br>C. ARMA模型<br>D. GARCH模型</p><p>AR模型：自回归模型，是一种线性模型<br>MA模型：移动平均法模型，其中使用趋势移动平均法建立直线趋势的预测模型<br>ARMA模型：自回归滑动平均模型，拟合较高阶模型<br>GARCH模型：广义回归模型，对误差的方差建模，适用于波动性的分析和预测</p><ol><li><p>AR模型是一种线性预测，即已知N个数据，可由模型推出第N点前面或后面的数据（设推出P点），所以其本质类似于插值。</p></li><li><p>MA模型(moving average model)滑动平均模型，模型参量法谱分析方法之一。</p></li><li><p>ARMA模型(auto regressive moving average model)自回归滑动平均模型，模型参量法高分辨率谱分析方法之一。这种方法是研究平稳随机过程有理谱的典型方法。它比AR模型法与MA模型法有较精确的谱估计及较优良的谱分辨率性能，但其参数估算比较繁琐。</p></li><li><p>GARCH模型称为广义ARCH模型，是ARCH模型的拓展,GARCH对误差的方差进行了进一步的建模，特别适用于波动性的分析和 预测。GARCH模型是一个专门针对金融数据所量体订做的回归模型，除去和普通回归模型相同的之处，GARCH对误差的方差进行了进一步的建模。特别适用于波动性的分析和预测，这样的分析对投资者的决策能起到非常重要的指导性作用，其意义很多时候超过了对数值本身的分析和预测。</p></li></ol><h1 id="Naive-Bayesian（NB）"><a href="#Naive-Bayesian（NB）" class="headerlink" title="Naive Bayesian（NB）"></a>Naive Bayesian（NB）</h1><p>Q: 假定某同学使用Naive Bayesian（NB）分类模型时，不小心将训练数据的两个维度搞重复了，那么关于NB的说法中正确的是:</p><ol><li><p>模型效果相比无重复特征的情况下精确度会降低</p></li><li><p>当两列特征高度相关时，无法用两列特征相同时所得到的结论来分析问题</p></li></ol><p>A: NB的核心在于它假设向量的所有分量之间是独立的。</p><ol><li><p>在贝叶斯理论系统中，都有一个重要的条件独立性假设：假设所有特征之间相互独立，这样才能将联合概率拆分.</p></li><li><p>主要原因就是由于存在重复的类别之后，破坏了原本的独立性假设。</p></li></ol><p>Q: 位势函数法的积累势函数K(x)的作用相当于Bayes判决中的:</p><p>1.后验概率</p><p>2.类概率密度与先验概率的乘积(其实二者含义相同)</p><h2 id="在贝叶斯决策中"><a href="#在贝叶斯决策中" class="headerlink" title="在贝叶斯决策中"></a>在贝叶斯决策中</h2><p>对于先验概率p(y)，分为已知和未知两种情况。</p><ol><li><p>p(y)已知，直接使用贝叶斯公式求后验概率即可；</p></li><li><p>p(y)未知，可以使用聂曼-皮尔逊决策(N-P决策)来计算决策面。</p></li></ol><p>而最大最小损失规则主要就是使用解决最小损失规则时先验概率未知或难以计算的问题的。</p><h1 id="高维数据进行降维"><a href="#高维数据进行降维" class="headerlink" title="高维数据进行降维:"></a>高维数据进行降维:</h1><ol><li>LASSO</li><li>PCA</li><li>聚类分析</li><li>小波分析</li><li>线性判别法</li><li>拉普拉斯特征映射</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算输出特征图大小&quot;&gt;&lt;a href=&quot;#计算输出特征图大小&quot; class=&quot;headerlink&quot; title=&quot;计算输出特征图大小&quot;&gt;&lt;/a&gt;计算输出特征图大小&lt;/h1&gt;&lt;p&gt;Q： 输入图片大小为200×200，依次经过一层卷积（kernel size 5×5
      
    
    </summary>
    
      <category term="机器学习" scheme="http://berryk.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>机器学习笔记（一）：NG的课程</title>
    <link href="http://berryk.top/archives/e6655ec0.html"/>
    <id>http://berryk.top/archives/e6655ec0.html</id>
    <published>2018-01-21T16:50:02.000Z</published>
    <updated>2018-02-15T05:38:26.124Z</updated>
    
    <content type="html"><![CDATA[<h1 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h1><ol><li><p>梯度下降的特点：梯度下降的结果一定会结束，也就是会收敛；但是收敛结果依赖于参数初始值。</p></li><li><p>局部最优值：当接近局部最小值时，步子会越来越小，直到快速收敛到全局最小值。</p></li><li><p>在局部最小值处，梯度是0；所以在接近局部最小值处，梯度越来越小，梯度下降每步变小。</p></li></ol><h2 id="Batch-gradient-descent批梯度下降"><a href="#Batch-gradient-descent批梯度下降" class="headerlink" title="Batch gradient descent批梯度下降"></a>Batch gradient descent批梯度下降</h2><ol><li><p>梯度下降算法的每一次迭代都要遍历整个训练集合。</p></li><li><p>每次迭代之后要更新参数，这对大规模数据集不利。</p></li><li><p>引入随机梯度下降或叫增量梯度下降。</p></li><li><p>注意到，这里激励函数不再用sigmoid{斜率也就是梯度近似都是0，难么梯度下降学习就会很慢}，而是用RULE。</p></li></ol><hr><h1 id="Incremental-gradient-descent：随机梯度下降"><a href="#Incremental-gradient-descent：随机梯度下降" class="headerlink" title="Incremental gradient descent：随机梯度下降"></a>Incremental gradient descent：随机梯度下降</h1><p>(一)好处：</p><ol><li><p>为了开始修改参数，查看并利用第一个训练样本进行更新，这样依次使用第二个样本进行更新，不需要在调整之前便利所有训练数据集合。</p></li><li><p>对于特定或者普通的最小二乘回归问题，梯度下降可以给出参数向量的解析表达式，这样为了求参数的值就不需要进行迭代了。</p></li></ol><p>(二)坏处：</p><ol><li><p>不会精确的收敛到全局最小值，而是向着全局最小值附近徘徊，可能会一直徘徊。</p></li><li><p>但是通常情况下，得到的结果很接近全局最小值，特别是在大规模数据训练集时，至少比批梯度下降算法要快很多。</p></li></ol><p>(三) 无人驾驶:</p><ol><li><p>监督学习中的回归问题（梯度下降也是回归问题）。</p></li><li><p>汽车尝试预测表示行驶方向的连续变量的值。</p></li></ol><hr><h1 id="局部加权回归locally-weighted-regression"><a href="#局部加权回归locally-weighted-regression" class="headerlink" title="局部加权回归locally weighted regression"></a>局部加权回归locally weighted regression</h1><h2 id="线性回归linear-regression-逻辑回归logic-regression-牛顿法"><a href="#线性回归linear-regression-逻辑回归logic-regression-牛顿法" class="headerlink" title="线性回归linear regression 逻辑回归logic regression 牛顿法"></a>线性回归linear regression 逻辑回归logic regression 牛顿法</h2><ol><li>Underfitting欠拟合：数据中某些非常明显的模式没有被成功的拟合出来</li><li>Overfitting过拟合：算法拟合出的结果显示所给的特定数据的特质。而不是隐藏在其下的房屋价格随房屋大小变化的一般规律。</li><li>过小的特征集合使得模型过于简单；过大的特征集合使得模型过于复杂</li><li>parametric learning algorithm参数学习算法：有固定的参数的数目进行数据拟合的算法</li><li>Non-parametric learning algorithm无参数学习算法：参数数目随着训练集合的大小线性增长</li></ol><h2 id="局部加权线性回归locally-weighted-regression：特定的无参数学习算法"><a href="#局部加权线性回归locally-weighted-regression：特定的无参数学习算法" class="headerlink" title="局部加权线性回归locally weighted regression：特定的无参数学习算法"></a>局部加权线性回归locally weighted regression：特定的无参数学习算法</h2><p><strong>缺点：</strong></p><ol><li>并不能完全避免过拟合和欠拟合的问题。</li><li>每次进行预测，要在一次根据整个训练集合拟合出。</li><li>若数据集大，代价高，但是可以KDtree来改善效率。</li></ol><p><strong>应用：</strong><br>用在了直升机自动驾驶上。</p><h2 id="为什选择最小二乘回归作为误差项的估计方法？"><a href="#为什选择最小二乘回归作为误差项的估计方法？" class="headerlink" title="为什选择最小二乘回归作为误差项的估计方法？"></a>为什选择最小二乘回归作为误差项的估计方法？</h2><p>待更</p><h2 id="似然性，中心极限定律"><a href="#似然性，中心极限定律" class="headerlink" title="似然性，中心极限定律"></a>似然性，中心极限定律</h2><p>待更</p><h2 id="logic-function-sigmoid-function"><a href="#logic-function-sigmoid-function" class="headerlink" title="logic function=sigmoid function"></a>logic function=sigmoid function</h2><p>待更</p><h2 id="感知器学习算法"><a href="#感知器学习算法" class="headerlink" title="感知器学习算法"></a>感知器学习算法</h2><p>待更</p><h2 id="牛顿学习法Newton’S-Method"><a href="#牛顿学习法Newton’S-Method" class="headerlink" title="牛顿学习法Newton’S Method"></a>牛顿学习法Newton’S Method</h2><ol><li><p>是一种不同的用来进行模型拟合的算法，例如可以对逻辑回归模型进行拟合。这类方法通常比梯度上升算法快得多。</p></li><li><p>收敛速度非常快，它的收敛速度用术语可以描述为：二次收敛。也就是，牛顿方法的每一次迭代都会使你正在逼近的解的有效数字的数目加倍。</p></li><li><p>通常需要迭代十几次就可以收敛，比上述梯度上升等算法要快得多</p><ol><li>但是，每次迭代需要重新计算一次Hession矩阵的逆（n*n, n代表特征的数量）</li><li>因此，如果要处理的问题中有大量的特征，比如说几千个，那么Hession矩阵的逆的求解要花费很大的代价。</li><li>但对于规模较小，特征数量合理的很合适。</li></ol></li><li><p>伯努利分布和高斯分布，都属于指数分布族</p></li></ol><h2 id="广义线性模型GLM，逻辑回归算法"><a href="#广义线性模型GLM，逻辑回归算法" class="headerlink" title="广义线性模型GLM，逻辑回归算法"></a>广义线性模型GLM，逻辑回归算法</h2><p>待更</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;梯度下降&quot;&gt;&lt;a href=&quot;#梯度下降&quot; class=&quot;headerlink&quot; title=&quot;梯度下降&quot;&gt;&lt;/a&gt;梯度下降&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;梯度下降的特点：梯度下降的结果一定会结束，也就是会收敛；但是收敛结果依赖于参数初始值。&lt;/p&gt;
&lt;/li&gt;
      
    
    </summary>
    
      <category term="机器学习" scheme="http://berryk.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="深度学习" scheme="http://berryk.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="算法" scheme="http://berryk.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>如何提交博客</title>
    <link href="http://berryk.top/archives/59ba8169.html"/>
    <id>http://berryk.top/archives/59ba8169.html</id>
    <published>2017-07-29T15:12:02.000Z</published>
    <updated>2018-02-15T05:38:26.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="如何提交博客"><a href="#如何提交博客" class="headerlink" title="如何提交博客"></a>如何提交博客</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>编辑markdown文档，在开头最前面加上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: sql基础语句</span><br><span class="line">categories: [sql,基础语句]</span><br><span class="line">tags: [sql,多个,选填]</span><br><span class="line">description: sql基础语句</span><br><span class="line">date: 2017-07-29 15:12:02</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><blockquote><p>第1行是你的博客标题；第2行是文章分类，可以写多级分类，例子中的就是一级分类sql”下的二级分类”基础语句”；<br>第4行是附加标签，有几个就填几个；第5行是文章描述；第6行是提交时间，按格式写就行；<br>这里<code>categories</code>、<code>tags</code>、<code>description</code>都可以不写，空的话就不分配相应信息；<br>注意每个冒号后空一个，上下的<code>---</code>不能掉</p></blockquote><p>然后下一行开始写博客内容，完成后存储为<code>xxxx.md</code>格式。</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><p>打开你的github仓库，选择<code>xxx.github.io.source</code>的一个进去<br><img src="http://otzlyqzo6.bkt.clouddn.com/blog/sourceTIM%E6%88%AA%E5%9B%BE20170802182403.jpg" alt="描述"><br>打开<code>source/_posts</code><br><img src="http://otzlyqzo6.bkt.clouddn.com/blog/sourceTIM%E6%88%AA%E5%9B%BE20170802182535.jpg" alt="描述"><br>然后上传文件，填写<code>commit</code>的信息和描述，然后<code>commit changes</code>，等待上传完成<br><img src="http://otzlyqzo6.bkt.clouddn.com/blog/source/TIM%E6%88%AA%E5%9B%BE20170802183225.jpg" alt="描述"></p><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><p>博客上传好了，等待几分钟，你的博客就会提交成功，等待刷新成功，或者你可以登录<a href="https://ci.appveyor.com/projects" target="_blank" rel="noopener">AppVeyor</a>，看你的上传进度，在<code>console</code>可以看到脚本的部署过程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;如何提交博客&quot;&gt;&lt;a href=&quot;#如何提交博客&quot; class=&quot;headerlink&quot; title=&quot;如何提交博客&quot;&gt;&lt;/a&gt;如何提交博客&lt;/h1&gt;&lt;h2 id=&quot;第一步&quot;&gt;&lt;a href=&quot;#第一步&quot; class=&quot;headerlink&quot; title=&quot;第一步
      
    
    </summary>
    
      <category term="技术文档" scheme="http://berryk.top/categories/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
  </entry>
  
</feed>
